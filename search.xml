<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>api-doc</title>
    <url>/2021/02/26/api-doc/</url>
    <content><![CDATA[<p>生成文档: <code>apidoc -i src -o dest</code></p>
]]></content>
  </entry>
  <entry>
    <title>maven_setting</title>
    <url>/2021/03/03/maven-setting/</url>
    <content><![CDATA[<ol>
<li>settings.xml文件用途</li>
</ol>
<ul>
<li>设置maven参数</li>
<li>包含本地仓库路径，远程仓库路径，认证信息等</li>
</ul>
<ol start="2">
<li>settings.xml文件位置</li>
</ol>
<ul>
<li>user.home/.m2/settings.xml</li>
</ul>
<ol start="3">
<li>元素</li>
</ol>
<ul>
<li>顶级元素<ul>
<li>LocalRepository: 本地仓库路径<br><code>&lt;localRepository&gt;$&#123;user.home&#125;/.m2/repository&lt;/localRepository&gt;</code></li>
<li>InteractiveMode: maven是否需要和用户交互获得输入<br><code>&lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</code></li>
<li>UsePluginRegistry:</li>
<li>Offline: maven是否需要在离线模式下运行<br><code>&lt;offline&gt;true&lt;/offline&gt;</code></li>
<li>PluginGroups</li>
<li>Servers: 仓库账号信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置服务端的一些设置。一些设置如安全证书不应该和pom.xml一起分发。这种类型的信息应该存在于构建服务器上的settings.xml文件中。 --&gt;</span><br><span class="line">&lt;servers&gt;</span><br><span class="line">  &lt;!--服务器元素包含配置服务器时需要的信息 --&gt;</span><br><span class="line">  &lt;server&gt;</span><br><span class="line">    &lt;!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 --&gt;</span><br><span class="line">    &lt;id&gt;server001&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 --&gt;</span><br><span class="line">    &lt;username&gt;my_login&lt;&#x2F;username&gt;</span><br><span class="line">    &lt;!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 +。详情请访问密码加密页面 --&gt;</span><br><span class="line">    &lt;password&gt;my_password&lt;&#x2F;password&gt;</span><br><span class="line">    &lt;!--鉴权时使用的私钥位置。和前两个元素类似，私钥位置和私钥密码指定了一个私钥的路径（默认是$&#123;user.home&#125;&#x2F;.ssh&#x2F;id_dsa）以及如果需要的话，一个密语。将来passphrase和password元素可能会被提取到外部，但目前它们必须在settings.xml文件以纯文本的形式声明。 --&gt;</span><br><span class="line">    &lt;privateKey&gt;$&#123;usr.home&#125;&#x2F;.ssh&#x2F;id_dsa&lt;&#x2F;privateKey&gt;</span><br><span class="line">    &lt;!--鉴权时使用的私钥密码。 --&gt;</span><br><span class="line">    &lt;passphrase&gt;some_passphrase&lt;&#x2F;passphrase&gt;</span><br><span class="line">    &lt;!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 --&gt;</span><br><span class="line">    &lt;filePermissions&gt;664&lt;&#x2F;filePermissions&gt;</span><br><span class="line">    &lt;!--目录被创建时的权限。 --&gt;</span><br><span class="line">    &lt;directoryPermissions&gt;775&lt;&#x2F;directoryPermissions&gt;</span><br><span class="line">  &lt;&#x2F;server&gt;</span><br><span class="line">&lt;&#x2F;servers&gt;</span><br></pre></td></tr></table></figure></li>
<li>Mirrors: 仓库列表的下载镜像列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">  &lt;!-- 给定仓库的下载镜像。 --&gt;</span><br><span class="line">  &lt;mirror&gt;</span><br><span class="line">    &lt;!-- 该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span><br><span class="line">    &lt;id&gt;planetmirror.com&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;!-- 镜像名称 --&gt;</span><br><span class="line">    &lt;name&gt;PlanetMirror Australia&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;!-- 该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;downloads.planetmirror.com&#x2F;pub&#x2F;maven2&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;!-- 被镜像的服务器的id。例如，如果我们要设置了一个Maven中央仓库（http:&#x2F;&#x2F;repo.maven.apache.org&#x2F;maven2&#x2F;）的镜像，就需要将该元素设置成central。这必须和中央仓库的id central完全一致。 --&gt;</span><br><span class="line">    &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">  &lt;&#x2F;mirror&gt;</span><br><span class="line">&lt;&#x2F;mirrors&gt;</span><br></pre></td></tr></table></figure></li>
<li>Proxies: 代理<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;proxies&gt;</span><br><span class="line">  &lt;!--代理元素包含配置代理时需要的信息 --&gt;</span><br><span class="line">  &lt;proxy&gt;</span><br><span class="line">    &lt;!--代理的唯一定义符，用来区分不同的代理元素。 --&gt;</span><br><span class="line">    &lt;id&gt;myproxy&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;!--该代理是否是激活的那个。true则激活代理。当我们声明了一组代理，而某个时候只需要激活一个代理的时候，该元素就可以派上用处。 --&gt;</span><br><span class="line">    &lt;active&gt;true&lt;&#x2F;active&gt;</span><br><span class="line">    &lt;!--代理的协议。 协议:&#x2F;&#x2F;主机名:端口，分隔成离散的元素以方便配置。 --&gt;</span><br><span class="line">    &lt;protocol&gt;http&lt;&#x2F;protocol&gt;</span><br><span class="line">    &lt;!--代理的主机名。协议:&#x2F;&#x2F;主机名:端口，分隔成离散的元素以方便配置。 --&gt;</span><br><span class="line">    &lt;host&gt;proxy.somewhere.com&lt;&#x2F;host&gt;</span><br><span class="line">    &lt;!--代理的端口。协议:&#x2F;&#x2F;主机名:端口，分隔成离散的元素以方便配置。 --&gt;</span><br><span class="line">    &lt;port&gt;8080&lt;&#x2F;port&gt;</span><br><span class="line">    &lt;!--代理的用户名，用户名和密码表示代理服务器认证的登录名和密码。 --&gt;</span><br><span class="line">    &lt;username&gt;proxyuser&lt;&#x2F;username&gt;</span><br><span class="line">    &lt;!--代理的密码，用户名和密码表示代理服务器认证的登录名和密码。 --&gt;</span><br><span class="line">    &lt;password&gt;somepassword&lt;&#x2F;password&gt;</span><br><span class="line">    &lt;!--不该被代理的主机名列表。该列表的分隔符由代理服务器指定；例子中使用了竖线分隔符，使用逗号分隔也很常见。 --&gt;</span><br><span class="line">    &lt;nonProxyHosts&gt;*.google.com|ibiblio.org&lt;&#x2F;nonProxyHosts&gt;</span><br><span class="line">  &lt;&#x2F;proxy&gt;</span><br><span class="line">&lt;&#x2F;proxies&gt;</span><br></pre></td></tr></table></figure></li>
<li>Profiles: 根据环境参数调整构建配置的列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;profiles&gt;</span><br><span class="line">  &lt;profile&gt;</span><br><span class="line">    &lt;!-- profile的唯一标识 --&gt;</span><br><span class="line">    &lt;id&gt;test&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;!-- 自动触发profile的条件逻辑 --&gt;</span><br><span class="line">    &lt;activation &#x2F;&gt;</span><br><span class="line">    &lt;!-- 扩展属性列表 --&gt;</span><br><span class="line">    &lt;properties &#x2F;&gt;</span><br><span class="line">    &lt;!-- 远程仓库列表 --&gt;</span><br><span class="line">    &lt;repositories &#x2F;&gt;</span><br><span class="line">    &lt;!-- 插件仓库列表 --&gt;</span><br><span class="line">    &lt;pluginRepositories &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;profile&gt;</span><br><span class="line">&lt;&#x2F;profiles&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>activation: 自动触发profile的条件逻辑</li>
<li>properties: 扩展属性列表，可以用${X}来使用</li>
<li>repositories: 远程仓库列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;repositories&gt;</span><br><span class="line">  &lt;!--包含需要连接到远程仓库的信息 --&gt;</span><br><span class="line">  &lt;repository&gt;</span><br><span class="line">    &lt;!--远程仓库唯一标识 --&gt;</span><br><span class="line">    &lt;id&gt;codehausSnapshots&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;!--远程仓库名称 --&gt;</span><br><span class="line">    &lt;name&gt;Codehaus Snapshots&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;!--如何处理远程仓库里发布版本的下载 --&gt;</span><br><span class="line">    &lt;releases&gt;</span><br><span class="line">      &lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span><br><span class="line">      &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">      &lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span><br><span class="line">      &lt;updatePolicy&gt;always&lt;&#x2F;updatePolicy&gt;</span><br><span class="line">      &lt;!--当Maven验证构件校验文件失败时该怎么做-ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span><br><span class="line">      &lt;checksumPolicy&gt;warn&lt;&#x2F;checksumPolicy&gt;</span><br><span class="line">    &lt;&#x2F;releases&gt;</span><br><span class="line">    &lt;!--如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories&#x2F;repository&#x2F;releases元素 --&gt;</span><br><span class="line">    &lt;snapshots&gt;</span><br><span class="line">      &lt;enabled &#x2F;&gt;</span><br><span class="line">      &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">      &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;snapshots&gt;</span><br><span class="line">    &lt;!--远程仓库URL，按protocol:&#x2F;&#x2F;hostname&#x2F;path形式 --&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;snapshots.maven.codehaus.org&#x2F;maven2&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;!--用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span><br><span class="line">    &lt;layout&gt;default&lt;&#x2F;layout&gt;</span><br><span class="line">  &lt;&#x2F;repository&gt;</span><br><span class="line">&lt;&#x2F;repositories&gt;</span><br></pre></td></tr></table></figure></li>
<li>pluginRepositories: 发现插件的远程仓库列表</li>
</ul>
</li>
<li>activeProfiles: 手动激活profiles的列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;!-- 要激活的profile id --&gt;</span><br><span class="line">  &lt;activeProfile&gt;env-test&lt;&#x2F;activeProfile&gt;</span><br><span class="line">&lt;&#x2F;activeProfiles&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>电影计划</title>
    <url>/2021/03/01/movie/</url>
    <content><![CDATA[<ol>
<li>2020</li>
</ol>
<ul>
<li>变身特工</li>
<li>八佰</li>
<li>急先锋</li>
<li>花木兰</li>
<li>小妇人</li>
<li>假面饭店</li>
<li>妙先生</li>
<li>金刚川</li>
<li>除暴</li>
<li>紧急救援</li>
<li>沐浴之王</li>
<li>晴雅集</li>
<li>疯狂原始人2</li>
<li>神奇女侠1984</li>
<li>一秒钟</li>
<li>数码宝贝：最后的进化</li>
<li>喜宝</li>
<li>温暖的抱抱</li>
<li>风平浪静</li>
<li>哆啦A梦：大雄的新恐龙</li>
<li>月半爱丽丝</li>
<li>隐形人海兽之子</li>
<li>宝可梦：超梦的逆袭进化</li>
<li>气球</li>
</ul>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>movie</tag>
      </tags>
  </entry>
  <entry>
    <title>神盾对账延迟故障复盘</title>
    <url>/2021/02/25/safe_delay/</url>
    <content><![CDATA[<p>2.19 开始有业务反馈神盾出现延迟(shuangchen)<br><img src="/2021/02/25/safe_delay/shuangchen_1.jpg"></p>
<p>初步来看，agent上报到svr延迟较大，应是大量数据上报超时堆积导致，每次agent上报超时，都会等待20s</p>
<p>2.20 延迟进一步加剧，大约有10+对账，处于延迟边缘，引发大量延迟事件</p>
<p>2.22 下午，发布新版本（增加耗时日志打印），延迟进一步加大，到5点逐渐扩展到2h<br>管理员收到大量告警，agent等待svr处理超过20s</p>
<p>2.22 晚上，发布多个版本，修改数据库线程池大小，增加超时时间设置，延迟降低，出现漏对事件</p>
<p>2.23 早上，延迟再次增加，且出现大量漏对事件，数据库备机压力大，dba增加索引，svr修改线程池，调整超时时间，延迟逐渐减少，漏对逐渐减少</p>
<p>BasicDataSource 改为 HiKariDataSource<br>HikariCP是一个轻量级的十分快速的JDBC连接池框架。<br>使用了以下这些技术</p>
<ul>
<li>字节级别的工程技术</li>
<li>微观层面的优化</li>
<li>集合框架的智能使用<br>demo<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HikariConfig config &#x3D; new HikariConfig();</span><br><span class="line">HikariDataSource ds;</span><br><span class="line"></span><br><span class="line">config.setJdbcUrl(&quot;jdbc_url&quot;);</span><br><span class="line">config.setUsername(&quot;xxx&quot;);</span><br><span class="line">config.setPassword(&quot;xxx&quot;);</span><br><span class="line">config.addDataSourceProperty(&quot;cachePrepStms&quot;, &quot;true&quot;);</span><br><span class="line">config.addDataSourceProperty(&quot;prepStmtCacheSize&quot;, &quot;250&quot;);</span><br><span class="line">config.addDataSourceProperty(&quot;prepStmtCacheSqlLimit&quot;, &quot;2048&quot;);</span><br><span class="line">ds &#x3D; new HikariDataSource(config);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>HikariConfig 配置类，初始化数据源<br>HikariCP可以检测到连接泄漏</p>
<p>索引增加字段（索引机制还是挺复杂的，有时间需要好好研究）<br>跟数据量，数据过滤比例，排序都有关系</p>
<ol>
<li>返回数据比例&gt;30%，不使用索引</li>
<li>where 和 order条件，先where后order</li>
<li>没有过滤效果的条件，可以不建立索引</li>
<li>时间段查询，&gt;= &amp;&amp; &lt;= 索引效果没有=效果好</li>
<li>like索引效果，没有in效果好</li>
</ol>
<p>2.24 下午，上报处理逻辑优化，尽量减少查询次数，减少排序，悲观锁改为乐观锁</p>
<p>后续，出现数次safe status更新失败告警，部分数据量大的表耗时偶尔较长，部分对账同时间上报多条数据，待优化<br><img src="/2021/02/25/safe_delay/update_safe_status_fail.png"></p>
]]></content>
      <categories>
        <category>safe</category>
      </categories>
      <tags>
        <tag>safe</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2021/02/26/test/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>hexo-operation</title>
    <url>/2021/11/05/hexo-operation/</url>
    <content><![CDATA[<ol>
<li><p>新建<br><code>hexo new &quot;file-name&quot;</code><br>新建的markdown文件在<code>source/_post/</code>目录下</p>
</li>
<li><p>生成静态网页<br><code>hexo generate</code><br>生成的静态网页在<code>public</code>目录的相应的日期下，比如2021-11-05生成，在<code>public/2021/11/05</code>文件夹下</p>
</li>
<li><p>本地启动<br><code>hexo server</code><br>启动端口为4000，可使用<code>localhost:4000</code>查看</p>
</li>
<li><p>部署<br><code>hexo deploy</code><br>网址为：huiresurgeran.github.io</p>
</li>
<li><p>删除<br>（1）去本地文件夹的<code>/source/_post</code>目录下删除需要删除的<code>.md</code>文件<br>（2）去本地文件夹的<code>/public</code>目录下删除这篇博客对应的文件夹（根据发布时间归档）<br>（3）重新生成并发布：generate + deploy</p>
</li>
<li><p>问题<br>博客更新时出现问题，可以进行清理并重新生成静态网页<br><code>hexo clean</code><br><code>hexo generate</code></p>
</li>
<li><p>参考内部文档<br><a class="link" href="https://km.woa.com/group/19976/articles/show/297274?kmref=search&amp;from_page=1&amp;no=2">https://km.woa.com/group/19976/articles/show/297274?kmref=search&amp;from_page=1&amp;no=2<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>code-tool</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>java-bytes</title>
    <url>/2021/11/05/java-bytes/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
