<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>api-doc</title>
    <url>/2021/02/26/api-doc/</url>
    <content><![CDATA[<p>生成文档: <code>apidoc -i src -o dest</code></p>
]]></content>
  </entry>
  <entry>
    <title>maven_setting</title>
    <url>/2021/03/03/maven-setting/</url>
    <content><![CDATA[<ol>
<li>settings.xml文件用途</li>
</ol>
<ul>
<li>设置maven参数</li>
<li>包含本地仓库路径，远程仓库路径，认证信息等</li>
</ul>
<ol start="2">
<li>settings.xml文件位置</li>
</ol>
<ul>
<li>user.home/.m2/settings.xml</li>
</ul>
<ol start="3">
<li>元素</li>
</ol>
<ul>
<li>顶级元素<ul>
<li>LocalRepository: 本地仓库路径<br><code>&lt;localRepository&gt;$&#123;user.home&#125;/.m2/repository&lt;/localRepository&gt;</code></li>
<li>InteractiveMode: maven是否需要和用户交互获得输入<br><code>&lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</code></li>
<li>UsePluginRegistry:</li>
<li>Offline: maven是否需要在离线模式下运行<br><code>&lt;offline&gt;true&lt;/offline&gt;</code></li>
<li>PluginGroups</li>
<li>Servers: 仓库账号信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置服务端的一些设置。一些设置如安全证书不应该和pom.xml一起分发。这种类型的信息应该存在于构建服务器上的settings.xml文件中。 --&gt;</span><br><span class="line">&lt;servers&gt;</span><br><span class="line">  &lt;!--服务器元素包含配置服务器时需要的信息 --&gt;</span><br><span class="line">  &lt;server&gt;</span><br><span class="line">    &lt;!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 --&gt;</span><br><span class="line">    &lt;id&gt;server001&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 --&gt;</span><br><span class="line">    &lt;username&gt;my_login&lt;&#x2F;username&gt;</span><br><span class="line">    &lt;!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 +。详情请访问密码加密页面 --&gt;</span><br><span class="line">    &lt;password&gt;my_password&lt;&#x2F;password&gt;</span><br><span class="line">    &lt;!--鉴权时使用的私钥位置。和前两个元素类似，私钥位置和私钥密码指定了一个私钥的路径（默认是$&#123;user.home&#125;&#x2F;.ssh&#x2F;id_dsa）以及如果需要的话，一个密语。将来passphrase和password元素可能会被提取到外部，但目前它们必须在settings.xml文件以纯文本的形式声明。 --&gt;</span><br><span class="line">    &lt;privateKey&gt;$&#123;usr.home&#125;&#x2F;.ssh&#x2F;id_dsa&lt;&#x2F;privateKey&gt;</span><br><span class="line">    &lt;!--鉴权时使用的私钥密码。 --&gt;</span><br><span class="line">    &lt;passphrase&gt;some_passphrase&lt;&#x2F;passphrase&gt;</span><br><span class="line">    &lt;!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 --&gt;</span><br><span class="line">    &lt;filePermissions&gt;664&lt;&#x2F;filePermissions&gt;</span><br><span class="line">    &lt;!--目录被创建时的权限。 --&gt;</span><br><span class="line">    &lt;directoryPermissions&gt;775&lt;&#x2F;directoryPermissions&gt;</span><br><span class="line">  &lt;&#x2F;server&gt;</span><br><span class="line">&lt;&#x2F;servers&gt;</span><br></pre></td></tr></table></figure></li>
<li>Mirrors: 仓库列表的下载镜像列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">  &lt;!-- 给定仓库的下载镜像。 --&gt;</span><br><span class="line">  &lt;mirror&gt;</span><br><span class="line">    &lt;!-- 该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span><br><span class="line">    &lt;id&gt;planetmirror.com&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;!-- 镜像名称 --&gt;</span><br><span class="line">    &lt;name&gt;PlanetMirror Australia&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;!-- 该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;downloads.planetmirror.com&#x2F;pub&#x2F;maven2&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;!-- 被镜像的服务器的id。例如，如果我们要设置了一个Maven中央仓库（http:&#x2F;&#x2F;repo.maven.apache.org&#x2F;maven2&#x2F;）的镜像，就需要将该元素设置成central。这必须和中央仓库的id central完全一致。 --&gt;</span><br><span class="line">    &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">  &lt;&#x2F;mirror&gt;</span><br><span class="line">&lt;&#x2F;mirrors&gt;</span><br></pre></td></tr></table></figure></li>
<li>Proxies: 代理<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;proxies&gt;</span><br><span class="line">  &lt;!--代理元素包含配置代理时需要的信息 --&gt;</span><br><span class="line">  &lt;proxy&gt;</span><br><span class="line">    &lt;!--代理的唯一定义符，用来区分不同的代理元素。 --&gt;</span><br><span class="line">    &lt;id&gt;myproxy&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;!--该代理是否是激活的那个。true则激活代理。当我们声明了一组代理，而某个时候只需要激活一个代理的时候，该元素就可以派上用处。 --&gt;</span><br><span class="line">    &lt;active&gt;true&lt;&#x2F;active&gt;</span><br><span class="line">    &lt;!--代理的协议。 协议:&#x2F;&#x2F;主机名:端口，分隔成离散的元素以方便配置。 --&gt;</span><br><span class="line">    &lt;protocol&gt;http&lt;&#x2F;protocol&gt;</span><br><span class="line">    &lt;!--代理的主机名。协议:&#x2F;&#x2F;主机名:端口，分隔成离散的元素以方便配置。 --&gt;</span><br><span class="line">    &lt;host&gt;proxy.somewhere.com&lt;&#x2F;host&gt;</span><br><span class="line">    &lt;!--代理的端口。协议:&#x2F;&#x2F;主机名:端口，分隔成离散的元素以方便配置。 --&gt;</span><br><span class="line">    &lt;port&gt;8080&lt;&#x2F;port&gt;</span><br><span class="line">    &lt;!--代理的用户名，用户名和密码表示代理服务器认证的登录名和密码。 --&gt;</span><br><span class="line">    &lt;username&gt;proxyuser&lt;&#x2F;username&gt;</span><br><span class="line">    &lt;!--代理的密码，用户名和密码表示代理服务器认证的登录名和密码。 --&gt;</span><br><span class="line">    &lt;password&gt;somepassword&lt;&#x2F;password&gt;</span><br><span class="line">    &lt;!--不该被代理的主机名列表。该列表的分隔符由代理服务器指定；例子中使用了竖线分隔符，使用逗号分隔也很常见。 --&gt;</span><br><span class="line">    &lt;nonProxyHosts&gt;*.google.com|ibiblio.org&lt;&#x2F;nonProxyHosts&gt;</span><br><span class="line">  &lt;&#x2F;proxy&gt;</span><br><span class="line">&lt;&#x2F;proxies&gt;</span><br></pre></td></tr></table></figure></li>
<li>Profiles: 根据环境参数调整构建配置的列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;profiles&gt;</span><br><span class="line">  &lt;profile&gt;</span><br><span class="line">    &lt;!-- profile的唯一标识 --&gt;</span><br><span class="line">    &lt;id&gt;test&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;!-- 自动触发profile的条件逻辑 --&gt;</span><br><span class="line">    &lt;activation &#x2F;&gt;</span><br><span class="line">    &lt;!-- 扩展属性列表 --&gt;</span><br><span class="line">    &lt;properties &#x2F;&gt;</span><br><span class="line">    &lt;!-- 远程仓库列表 --&gt;</span><br><span class="line">    &lt;repositories &#x2F;&gt;</span><br><span class="line">    &lt;!-- 插件仓库列表 --&gt;</span><br><span class="line">    &lt;pluginRepositories &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;profile&gt;</span><br><span class="line">&lt;&#x2F;profiles&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>activation: 自动触发profile的条件逻辑</li>
<li>properties: 扩展属性列表，可以用${X}来使用</li>
<li>repositories: 远程仓库列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;repositories&gt;</span><br><span class="line">  &lt;!--包含需要连接到远程仓库的信息 --&gt;</span><br><span class="line">  &lt;repository&gt;</span><br><span class="line">    &lt;!--远程仓库唯一标识 --&gt;</span><br><span class="line">    &lt;id&gt;codehausSnapshots&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;!--远程仓库名称 --&gt;</span><br><span class="line">    &lt;name&gt;Codehaus Snapshots&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;!--如何处理远程仓库里发布版本的下载 --&gt;</span><br><span class="line">    &lt;releases&gt;</span><br><span class="line">      &lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span><br><span class="line">      &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">      &lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span><br><span class="line">      &lt;updatePolicy&gt;always&lt;&#x2F;updatePolicy&gt;</span><br><span class="line">      &lt;!--当Maven验证构件校验文件失败时该怎么做-ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span><br><span class="line">      &lt;checksumPolicy&gt;warn&lt;&#x2F;checksumPolicy&gt;</span><br><span class="line">    &lt;&#x2F;releases&gt;</span><br><span class="line">    &lt;!--如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories&#x2F;repository&#x2F;releases元素 --&gt;</span><br><span class="line">    &lt;snapshots&gt;</span><br><span class="line">      &lt;enabled &#x2F;&gt;</span><br><span class="line">      &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">      &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;snapshots&gt;</span><br><span class="line">    &lt;!--远程仓库URL，按protocol:&#x2F;&#x2F;hostname&#x2F;path形式 --&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;snapshots.maven.codehaus.org&#x2F;maven2&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;!--用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span><br><span class="line">    &lt;layout&gt;default&lt;&#x2F;layout&gt;</span><br><span class="line">  &lt;&#x2F;repository&gt;</span><br><span class="line">&lt;&#x2F;repositories&gt;</span><br></pre></td></tr></table></figure></li>
<li>pluginRepositories: 发现插件的远程仓库列表</li>
</ul>
</li>
<li>activeProfiles: 手动激活profiles的列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;!-- 要激活的profile id --&gt;</span><br><span class="line">  &lt;activeProfile&gt;env-test&lt;&#x2F;activeProfile&gt;</span><br><span class="line">&lt;&#x2F;activeProfiles&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>电影计划</title>
    <url>/2021/03/01/movie/</url>
    <content><![CDATA[<ol>
<li>2020</li>
</ol>
<ul>
<li>变身特工</li>
<li>八佰</li>
<li>急先锋</li>
<li>花木兰</li>
<li>小妇人</li>
<li>假面饭店</li>
<li>妙先生</li>
<li>金刚川</li>
<li>除暴</li>
<li>紧急救援</li>
<li>沐浴之王</li>
<li>晴雅集</li>
<li>疯狂原始人2</li>
<li>神奇女侠1984</li>
<li>一秒钟</li>
<li>数码宝贝：最后的进化</li>
<li>喜宝</li>
<li>温暖的抱抱</li>
<li>风平浪静</li>
<li>哆啦A梦：大雄的新恐龙</li>
<li>月半爱丽丝</li>
<li>隐形人海兽之子</li>
<li>宝可梦：超梦的逆袭进化</li>
<li>气球</li>
</ul>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>movie</tag>
      </tags>
  </entry>
  <entry>
    <title>神盾对账延迟故障复盘</title>
    <url>/2021/02/25/safe_delay/</url>
    <content><![CDATA[<p>2.19 开始有业务反馈神盾出现延迟(shuangchen)<br><img src="/2021/02/25/safe_delay/shuangchen_1.jpg"></p>
<p>初步来看，agent上报到svr延迟较大，应是大量数据上报超时堆积导致，每次agent上报超时，都会等待20s</p>
<p>2.20 延迟进一步加剧，大约有10+对账，处于延迟边缘，引发大量延迟事件</p>
<p>2.22 下午，发布新版本（增加耗时日志打印），延迟进一步加大，到5点逐渐扩展到2h<br>管理员收到大量告警，agent等待svr处理超过20s</p>
<p>2.22 晚上，发布多个版本，修改数据库线程池大小，增加超时时间设置，延迟降低，出现漏对事件</p>
<p>2.23 早上，延迟再次增加，且出现大量漏对事件，数据库备机压力大，dba增加索引，svr修改线程池，调整超时时间，延迟逐渐减少，漏对逐渐减少</p>
<p>BasicDataSource 改为 HiKariDataSource<br>HikariCP是一个轻量级的十分快速的JDBC连接池框架。<br>使用了以下这些技术</p>
<ul>
<li>字节级别的工程技术</li>
<li>微观层面的优化</li>
<li>集合框架的智能使用<br>demo<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HikariConfig config &#x3D; new HikariConfig();</span><br><span class="line">HikariDataSource ds;</span><br><span class="line"></span><br><span class="line">config.setJdbcUrl(&quot;jdbc_url&quot;);</span><br><span class="line">config.setUsername(&quot;xxx&quot;);</span><br><span class="line">config.setPassword(&quot;xxx&quot;);</span><br><span class="line">config.addDataSourceProperty(&quot;cachePrepStms&quot;, &quot;true&quot;);</span><br><span class="line">config.addDataSourceProperty(&quot;prepStmtCacheSize&quot;, &quot;250&quot;);</span><br><span class="line">config.addDataSourceProperty(&quot;prepStmtCacheSqlLimit&quot;, &quot;2048&quot;);</span><br><span class="line">ds &#x3D; new HikariDataSource(config);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>HikariConfig 配置类，初始化数据源<br>HikariCP可以检测到连接泄漏</p>
<p>索引增加字段（索引机制还是挺复杂的，有时间需要好好研究）<br>跟数据量，数据过滤比例，排序都有关系</p>
<ol>
<li>返回数据比例&gt;30%，不使用索引</li>
<li>where 和 order条件，先where后order</li>
<li>没有过滤效果的条件，可以不建立索引</li>
<li>时间段查询，&gt;= &amp;&amp; &lt;= 索引效果没有=效果好</li>
<li>like索引效果，没有in效果好</li>
</ol>
<p>2.24 下午，上报处理逻辑优化，尽量减少查询次数，减少排序，悲观锁改为乐观锁</p>
<p>后续，出现数次safe status更新失败告警，部分数据量大的表耗时偶尔较长，部分对账同时间上报多条数据，待优化<br><img src="/2021/02/25/safe_delay/update_safe_status_fail.png"></p>
]]></content>
      <categories>
        <category>safe</category>
      </categories>
      <tags>
        <tag>safe</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2021/02/26/test/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>hexo-operation</title>
    <url>/2021/11/05/hexo-operation/</url>
    <content><![CDATA[<ol>
<li><p>新建<br><code>hexo new &quot;file-name&quot;</code><br>新建的markdown文件在<code>source/_post/</code>目录下</p>
</li>
<li><p>生成静态网页<br><code>hexo generate</code><br>生成的静态网页在<code>public</code>目录的相应的日期下，比如2021-11-05生成，在<code>public/2021/11/05</code>文件夹下</p>
</li>
<li><p>本地启动<br><code>hexo server</code><br>启动端口为4000，可使用<code>localhost:4000</code>查看</p>
</li>
<li><p>部署<br><code>hexo deploy</code><br>网址为：huiresurgeran.github.io<br>带提交信息<code>hexo deploy -m &quot;commit messgae</code></p>
</li>
<li><p>删除<br>（1）去本地文件夹的<code>/source/_post</code>目录下删除需要删除的<code>.md</code>文件<br>（2）去本地文件夹的<code>/public</code>目录下删除这篇博客对应的文件夹（根据发布时间归档）<br>（3）重新生成并发布：generate + deploy</p>
</li>
<li><p>问题<br>博客更新时出现问题，可以进行清理并重新生成静态网页<br><code>hexo clean</code><br><code>hexo generate</code></p>
</li>
<li><p>参考内部文档<br><a class="link" href="https://km.woa.com/group/19976/articles/show/297274?kmref=search&amp;from_page=1&amp;no=2">https://km.woa.com/group/19976/articles/show/297274?kmref=search&amp;from_page=1&amp;no=2<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>git分支备份hexo md源码<br><a class="link" href="https://blog.csdn.net/qq_45271256/article/details/105800705?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">https://blog.csdn.net/qq_45271256/article/details/105800705?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>code-tool</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>java-bytes</title>
    <url>/2021/11/05/java-bytes/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>大数据处理平台对比</title>
    <url>/2021/11/09/big-data-compare/</url>
    <content><![CDATA[<h2 id="1-关系型数据库：mysql-postgre"><a href="#1-关系型数据库：mysql-postgre" class="headerlink" title="1. 关系型数据库：mysql + postgre"></a>1. 关系型数据库：mysql + postgre</h2><p>优点：</p>
<ul>
<li>稳定</li>
<li>简单</li>
<li>结构化数据</li>
</ul>
<p>缺点：</p>
<ul>
<li>存储成本大（时序数据压缩不佳）</li>
<li>维护成本高（人工分库分表）</li>
<li>写入吞吐低（磁盘IO + 索引建立）</li>
<li>查询性能差（磁盘IO + 索引建立）</li>
<li>聚合海量性能差（适合事务，不适合聚合）</li>
<li>数据规模支持小</li>
<li>难以横向扩展</li>
<li>postgre，聚合查询，容易出现性能瓶颈</li>
</ul>
<h2 id="2-非关系型数据库：mongodb"><a href="#2-非关系型数据库：mongodb" class="headerlink" title="2. 非关系型数据库：mongodb"></a>2. 非关系型数据库：mongodb</h2><p>优点</p>
<ul>
<li>查询功能强大</li>
<li>表结构灵活可变</li>
<li>删改数据方便</li>
<li>海量存储</li>
</ul>
<p>缺点</p>
<ul>
<li>多表查询、复杂事务等高级操作有阻碍</li>
<li>非分布式，难以横向扩容：集群配置，绑定分片、副本节点</li>
<li>字段搜索需要手动索引：B+ tree，最左优先</li>
<li>不适合大数据量查询：比不上ES的倒排索引（亿级）</li>
<li>不适合多表和复杂条件查询：创建B+树索引</li>
<li>不适合全文检索：字段个数有限制</li>
<li>不适合聚合：负责聚合通过MapReduce，速度慢</li>
</ul>
<p>和es的对比</p>
<ul>
<li>mongodb适合需要修改的数据，es适合不需要的</li>
<li>es查询/全文索引/聚合分析比mongodb强</li>
</ul>
<h2 id="3-druid，德鲁伊"><a href="#3-druid，德鲁伊" class="headerlink" title="3. druid，德鲁伊"></a>3. druid，德鲁伊</h2><p>介绍：分布式的，支持实时多维OLAP分析的数据处理系统<br>优点：</p>
<ul>
<li>适合聚合，快速扫描：列式存储，压缩的位图索引</li>
<li>可扩展的分布式系统：自我平衡，易于操作</li>
<li>支持数据规模大</li>
<li>支持实时或批量查询，秒级查询：列存压缩，位图索引，倒排索引，预聚合</li>
<li>基于时间的分区：提高时间数据性能</li>
</ul>
<p>缺点：</p>
<ul>
<li>支持基础的搜索，不支持全文搜索</li>
<li>核心功能rollup，rollup之后丢失明细数据</li>
<li>不适合复杂聚合</li>
<li>外部依赖多，部署运维麻烦</li>
</ul>
<h2 id="4-clickhouse"><a href="#4-clickhouse" class="headerlink" title="4. clickhouse"></a>4. clickhouse</h2><p>完全列式存储计算的分析性数据库，OLAP</p>
<p>优点</p>
<ul>
<li>数据压缩</li>
<li>多核并行处理，单机性能到极限</li>
<li>适合复杂深度聚合：merge tree</li>
<li>写入吞吐量大，ES 5倍以上</li>
<li>查询速度快，支持SQL（列式+压缩）</li>
<li>支持向量化计算</li>
<li>服务器成本低，稳定性更高</li>
</ul>
<p>缺点：</p>
<ul>
<li>分布式依赖zk，无节点发现能力，需要手动配置（和mongodb一样）</li>
<li>列式数据库，不支持全文检索（列式存储）</li>
<li>无法动态添加字段</li>
<li>日志无法长期保存（下线清理）</li>
<li>不支持高并发查询（qps 100，单次查询利用所有资源）</li>
</ul>
<h2 id="5-es：全文索引"><a href="#5-es：全文索引" class="headerlink" title="5. es：全文索引"></a>5. es：全文索引</h2><p>综合首选：查询 + 删改 + 聚合 + 运维 + 可视化kibana + 监控monitor + 安全管理</p>
<h3 id="（1）mongodb"><a href="#（1）mongodb" class="headerlink" title="（1）mongodb"></a>（1）mongodb</h3><ul>
<li>文档查询性能：倒排索引/KDB-Tree比B+树厉害</li>
<li>聚合分析能力：ES提供doc-value，比mongodb行式快</li>
<li>分布式（集群分片副本）：ES自动 &gt; mongodb手动</li>
<li>ES特色功能比mongodb多：kibana，监控等等</li>
<li>ES适合JAVA开发，RESTFUL API，mongodb基于C++</li>
<li>ES字段自动索引，mongodb需要手动建立</li>
<li>存储：内存，不考虑</li>
</ul>
<h3 id="（2）druid"><a href="#（2）druid" class="headerlink" title="（2）druid"></a>（2）druid</h3><ul>
<li>rollup后druid明细数据会丢失，ES可查询明细数据</li>
<li>druid适合单类聚合查询，不适合复杂的</li>
<li>druid外部依赖多，部署运维麻烦（存储使用HDFS)；ES搭建十分简单，外部依赖少</li>
<li>druid不支持全文检索</li>
</ul>
<h3 id="（3）clickhouse"><a href="#（3）clickhouse" class="headerlink" title="（3）clickhouse"></a>（3）clickhouse</h3><ul>
<li>建表需要专家参与：索引匹配则效率高，不匹配效率波动大</li>
<li>并发能力弱：单次查询利用所有资源</li>
<li>不支持全文检索：列式存储</li>
<li>不适合通过其键检索单行的点查询，es适合点查询</li>
<li>分布式，无节点发现能力，需手动配置（节点，分片，副本）</li>
</ul>
<h3 id="（4）hermes"><a href="#（4）hermes" class="headerlink" title="（4）hermes"></a>（4）hermes</h3><ul>
<li>读写性能：ES读写性能比Hermes好，因为HDFS的性能比不上本地文件系统</li>
<li>服务可用性：节点故障时，分片的服务恢复时间相对较长，包括原节点的WAL恢复，索引的online操作；ES可用性较高，多个副本都是online状态，副本切换</li>
<li>侧重点：hermes侧重数据分析，es侧重搜索和聚合</li>
<li>运营效益：部门相关系统均选择es/ctsdb，有问题，沟通询问更顺畅方便</li>
<li>全本搜索 + kibana</li>
</ul>
<h3 id="（5）hbase"><a href="#（5）hbase" class="headerlink" title="（5）hbase"></a>（5）hbase</h3><ul>
<li>查询：hbase不支持复杂查询（列式存储）</li>
<li>依赖重：hbase无专用查询语言，依赖第三方工具</li>
<li>Rowkey：hbase依赖Rowkey设计，ES更通用</li>
</ul>
<h2 id="6-hermes"><a href="#6-hermes" class="headerlink" title="6. hermes"></a>6. hermes</h2><p>大数据实时分析系统<br>海量数据实时写入和存储，低延迟查询分析的平台<br>索引的读写和分布式架构自研，底层存储基于HDFS，集群管理利用ZK</p>
<p>缺点</p>
<ul>
<li>写入搜索性能差一点（访问HDFS，比不上访问本地文件系统）</li>
<li>查询写入性能差</li>
</ul>
<p>优点</p>
<ul>
<li>数据导入可以通过kafka等直接写入/MapReduce</li>
<li>计算与存储分离，管理精细化，浪费更少</li>
<li>分片数据存储在HDFS，资源更加弹性</li>
<li>写入时资源消耗低，可用于索引合并的资源更多，减少小索引的数量，提高查询性能，副本异步同步</li>
<li>hermes将索引和数据分离存储，降低索引目录刷盘次数和目录个数，提高读写</li>
<li>hermes适合数据分析，es适合检索</li>
<li>适合更大规模的业务</li>
</ul>
<h2 id="7-hbase"><a href="#7-hbase" class="headerlink" title="7. hbase"></a>7. hbase</h2><p>基于HDFS的数据库，列式存储，无专用查询语言，NoSql数据库</p>
<p>优点</p>
<ul>
<li>海量数据实时查询</li>
<li>极强的横向扩展能力</li>
<li>近实时系统，支持实时查询</li>
<li>支持更大量的数据</li>
</ul>
<p>缺点</p>
<ul>
<li>复杂查询难以进行，列式存储</li>
<li>依赖多：无专用查询语言，依赖第三方</li>
<li>基于RowKey，RowKey设计的好坏决定了HBase使用效果</li>
</ul>
<h2 id="8-hadoop"><a href="#8-hadoop" class="headerlink" title="8. hadoop"></a>8. hadoop</h2><p>mapReduce + HDFS，hive和hbase的基础</p>
<p>缺点：数据延迟高（离线批处理） + 查询性能差</p>
<h2 id="9-hive"><a href="#9-hive" class="headerlink" title="9. hive"></a>9. hive</h2><p>hadoop数据仓库工具，分析查询引擎，用于数据分析</p>
<p>功能：hive将sql翻译成MapReduce，处理和计算HDFS数据<br>缺点：数据延迟高（离线批处理）<br>特点：本身不存储也不计算，存储依赖HDFS，计算依赖MapReduce</p>
]]></content>
      <categories>
        <category>答辩</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>big-data</tag>
      </tags>
  </entry>
  <entry>
    <title>CTSDB查询优化</title>
    <url>/2021/11/09/CTSDB%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="1-from-size"><a href="#1-from-size" class="headerlink" title="1. from/size"></a>1. from/size</h2><p>避免分页深度</p>
<h2 id="2-实时聚合-》-rollup"><a href="#2-实时聚合-》-rollup" class="headerlink" title="2. 实时聚合 =》 rollup"></a>2. 实时聚合 =》 rollup</h2><p>实时聚合影响：内存占用，分桶多的数据</p>
<h2 id="3-排序优化"><a href="#3-排序优化" class="headerlink" title="3. 排序优化"></a>3. 排序优化</h2><ul>
<li>index sorting，docID和indexSorting的顺序一致</li>
<li>遍历 =》 提前中断</li>
<li>降低了写入性能</li>
<li>提高了查询性能<ul>
<li>预排序 + after key + 提前中断</li>
<li>数据压缩率</li>
</ul>
</li>
</ul>
<h2 id="4-查询剪枝"><a href="#4-查询剪枝" class="headerlink" title="4. 查询剪枝"></a>4. 查询剪枝</h2><p>segment，最大值最小值<br>遍历 =》 跳过</p>
<h2 id="5-routing"><a href="#5-routing" class="headerlink" title="5. routing"></a>5. routing</h2><p>一次聚合 + 分片级并发</p>
<h2 id="6-rollup"><a href="#6-rollup" class="headerlink" title="6. rollup"></a>6. rollup</h2><p>流式聚合（并发分页）<br>indexSorting（提前中断）<br>查询剪枝<br>routing（分片级并发）</p>
<h2 id="7-composite"><a href="#7-composite" class="headerlink" title="7. composite"></a>7. composite</h2>]]></content>
      <categories>
        <category>答辩</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>ctsdb</tag>
        <tag>search</tag>
      </tags>
  </entry>
  <entry>
    <title>FMHA</title>
    <url>/2021/11/09/FMHA/</url>
    <content><![CDATA[<h2 id="1-一主三备"><a href="#1-一主三备" class="headerlink" title="1. 一主三备"></a>1. 一主三备</h2><p>主：锦绣<br>备：锦绣 + 荔景 + 光明</p>
<h2 id="2-复制类型"><a href="#2-复制类型" class="headerlink" title="2. 复制类型"></a>2. 复制类型</h2><p>同步/半同步</p>
<h2 id="3-容灾"><a href="#3-容灾" class="headerlink" title="3. 容灾"></a>3. 容灾</h2><p>强容灾</p>
<h2 id="4-卡主修复"><a href="#4-卡主修复" class="headerlink" title="4. 卡主修复"></a>4. 卡主修复</h2><p>关闭：直接切换主备<br>开启：异步复制，容易出现单点故障，导致数据丢失</p>
]]></content>
      <categories>
        <category>答辩</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>db</tag>
      </tags>
  </entry>
  <entry>
    <title>ckv+ &amp; ckv &amp; redis</title>
    <url>/2021/11/09/cache/</url>
    <content><![CDATA[<h2 id="1-CKV"><a href="#1-CKV" class="headerlink" title="1. CKV+"></a>1. CKV+</h2><h4 id="（1）多数据结构"><a href="#（1）多数据结构" class="headerlink" title="（1）多数据结构"></a>（1）多数据结构</h4><p>string，list，zset等等</p>
<h4 id="（2）并发处理"><a href="#（2）并发处理" class="headerlink" title="（2）并发处理"></a>（2）并发处理</h4><p>单进程，多线程<br>一个分片绑定一个CPU，避免加锁</p>
<ul>
<li>网络IO，编解码，分给所有CPU</li>
<li>数据执行，分片ID指定的CPU</li>
</ul>
<h4 id="（3）强一致同步"><a href="#（3）强一致同步" class="headerlink" title="（3）强一致同步"></a>（3）强一致同步</h4><p>raft协议 + 冷备</p>
<h4 id="（4）多协议支持"><a href="#（4）多协议支持" class="headerlink" title="（4）多协议支持"></a>（4）多协议支持</h4><p>redis + memcache</p>
<h4 id="（5）冷热分离"><a href="#（5）冷热分离" class="headerlink" title="（5）冷热分离"></a>（5）冷热分离</h4><p>不支持</p>
<h4 id="（6）读写性能"><a href="#（6）读写性能" class="headerlink" title="（6）读写性能"></a>（6）读写性能</h4><p>多核，多线程<br>一个分片一个CPU，避免加锁<br>CPU对应独立的处理进程<br>网络IO和编解码，使用所有的CPU<br>数据执行，使用分片ID指定的CPU</p>
<h4 id="（7）限制"><a href="#（7）限制" class="headerlink" title="（7）限制"></a>（7）限制</h4><p>key，最大64k<br>value，最大32M</p>
<h4 id="（8）内存使用率"><a href="#（8）内存使用率" class="headerlink" title="（8）内存使用率"></a>（8）内存使用率</h4><p>多规格block + 动态分配page</p>
<h2 id="2-CKV"><a href="#2-CKV" class="headerlink" title="2. CKV"></a>2. CKV</h2><h4 id="（1）多数据结构-1"><a href="#（1）多数据结构-1" class="headerlink" title="（1）多数据结构"></a>（1）多数据结构</h4><p>只支持string</p>
<h4 id="（2）并发处理-1"><a href="#（2）并发处理-1" class="headerlink" title="（2）并发处理"></a>（2）并发处理</h4><p>多进程加锁</p>
<h4 id="（3）强一致同步-1"><a href="#（3）强一致同步-1" class="headerlink" title="（3）强一致同步"></a>（3）强一致同步</h4><p>不支持<br>其他同步:recover恢复中心</p>
<h4 id="（4）多协议支持-1"><a href="#（4）多协议支持-1" class="headerlink" title="（4）多协议支持"></a>（4）多协议支持</h4><p>memcache</p>
<h4 id="（5）冷热分离-1"><a href="#（5）冷热分离-1" class="headerlink" title="（5）冷热分离"></a>（5）冷热分离</h4><p>热数据系统,CMEM<br>冷数据系统，SSD</p>
<h4 id="（6）读写性能-1"><a href="#（6）读写性能-1" class="headerlink" title="（6）读写性能"></a>（6）读写性能</h4><p>网络IO与核心流程解耦<br>多进程<br>逻辑处理，进程间加锁（毛刺）</p>
<h4 id="（7）限制-1"><a href="#（7）限制-1" class="headerlink" title="（7）限制"></a>（7）限制</h4><p>key，2-10bytes<br>value，最大10M，最好小于1M</p>
<h4 id="（8）内存使用率-1"><a href="#（8）内存使用率-1" class="headerlink" title="（8）内存使用率"></a>（8）内存使用率</h4><p>和obj_size业务平均记录大小有关<br>业务记录大小分布越集中，碎片率越低</p>
<h2 id="3-Redis"><a href="#3-Redis" class="headerlink" title="3. Redis"></a>3. Redis</h2><h4 id="（1）多数据结构-2"><a href="#（1）多数据结构-2" class="headerlink" title="（1）多数据结构"></a>（1）多数据结构</h4><p>string，list，zset等等</p>
<h4 id="（2）并发处理-2"><a href="#（2）并发处理-2" class="headerlink" title="（2）并发处理"></a>（2）并发处理</h4><p>多线程，2020年下推出<br>网络IO多线程</p>
<h4 id="（3）强一致同步-2"><a href="#（3）强一致同步-2" class="headerlink" title="（3）强一致同步"></a>（3）强一致同步</h4><p>不支持，只有异步复制</p>
<h4 id="（4）多协议支持-2"><a href="#（4）多协议支持-2" class="headerlink" title="（4）多协议支持"></a>（4）多协议支持</h4><h4 id="（5）冷热分离-2"><a href="#（5）冷热分离-2" class="headerlink" title="（5）冷热分离"></a>（5）冷热分离</h4><p>不支持</p>
<h4 id="（6）读写性能-2"><a href="#（6）读写性能-2" class="headerlink" title="（6）读写性能"></a>（6）读写性能</h4><p>非阻塞IO + IO多路复用<br>单线程 + 队列技术 + hash数据结构</p>
<h4 id="（7）限制-2"><a href="#（7）限制-2" class="headerlink" title="（7）限制"></a>（7）限制</h4><p>value，1GB</p>
<h4 id="（8）内存使用率-2"><a href="#（8）内存使用率-2" class="headerlink" title="（8）内存使用率"></a>（8）内存使用率</h4><p>LRU,TTL,腾出空间</p>
<ul>
<li>过期键删除，释放空间无法充分利用</li>
</ul>
<p>分布式存储，槽机制</p>
<ul>
<li>缩短key，value长度</li>
<li>序列化</li>
<li>数据对齐</li>
<li>安全重启</li>
</ul>
<p>固定范围的内存块分配：小，大，巨大<br>每个范围又被划分成多个小的内存块单位</p>
]]></content>
      <categories>
        <category>答辩</category>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>cftologserver</title>
    <url>/2021/11/09/cftologserver/</url>
    <content><![CDATA[<h2 id="1-模块化"><a href="#1-模块化" class="headerlink" title="1. 模块化"></a>1. 模块化</h2><h4 id="（1）五个模块"><a href="#（1）五个模块" class="headerlink" title="（1）五个模块"></a>（1）五个模块</h4><h4 id="（2）资源配置"><a href="#（2）资源配置" class="headerlink" title="（2）资源配置"></a>（2）资源配置</h4><p>kafka集群：深圳 + 上海<br>消费者：分片16<br>cacher：ThreadPoolExecutor，100个线程，2000个无界队列<br>processor：每个尾号一个线程（尾号hash % 线程数）<br>writer：1/分片 + 1/processor</p>
<h4 id="（3）机器说明"><a href="#（3）机器说明" class="headerlink" title="（3）机器说明"></a>（3）机器说明</h4><p>B70<br>内存：125G，16G * 8 = 128G<br>硬盘：300G<br>物理CPU：2<br>核数：12<br>逻辑CPU：48（2 * 12 *2）<br>CPU Mhz：2301.00<br>RAID：RAID1<br>网络：10GE * 2，10G以太网网络</p>
<h2 id="2-线程池"><a href="#2-线程池" class="headerlink" title="2. 线程池"></a>2. 线程池</h2><h4 id="（1）作用"><a href="#（1）作用" class="headerlink" title="（1）作用"></a>（1）作用</h4><p>降低资源消耗<br>提高系统运行速度<br>提高可管理性</p>
<h4 id="（2）使用"><a href="#（2）使用" class="headerlink" title="（2）使用"></a>（2）使用</h4><p>ThreadPoolExecutor<br>核心线程池：100<br>阻塞队列：ArrayBlockingQueue，2000<br>线程池：200<br>饱和策略：DiscardPolicy</p>
<h2 id="3-缓存"><a href="#3-缓存" class="headerlink" title="3. 缓存"></a>3. 缓存</h2><p>同步锁，synchronized，多线程环境，线程安全同步锁</p>
]]></content>
      <categories>
        <category>答辩</category>
        <category>日志服务</category>
      </categories>
      <tags>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>hermes &amp; es &amp; ces &amp; ctsdb</title>
    <url>/2021/11/09/hermes-es/</url>
    <content><![CDATA[<h2 id="1-hermes"><a href="#1-hermes" class="headerlink" title="1. hermes"></a>1. hermes</h2><p>写入搜索性能：HDFS</p>
<h2 id="2-es"><a href="#2-es" class="headerlink" title="2. es"></a>2. es</h2><p>存储规模限制：集群管理成本，信息同步成本</p>
<p>写入搜索性能：本地磁盘</p>
<h2 id="3-ces"><a href="#3-ces" class="headerlink" title="3. ces"></a>3. ces</h2><p>存储规模：集群管理成本，信息同步成本</p>
<p>写入搜索性能：同CTSDB</p>
<p>特点：适合检索</p>
<h2 id="4-CTSDB"><a href="#4-CTSDB" class="headerlink" title="4. CTSDB"></a>4. CTSDB</h2><h4 id="（1）存储规模"><a href="#（1）存储规模" class="headerlink" title="（1）存储规模"></a>（1）存储规模</h4><p>集群大小，管理成本，集群元数据大同步慢</p>
<h4 id="（2）低成本存储"><a href="#（2）低成本存储" class="headerlink" title="（2）低成本存储"></a>（2）低成本存储</h4><p>编码压缩算法 + rollup + 过期时间</p>
<h4 id="（3）写入搜索性能"><a href="#（3）写入搜索性能" class="headerlink" title="（3）写入搜索性能"></a>（3）写入搜索性能</h4><ul>
<li>写入<ul>
<li>写入内存，之后再写入磁盘</li>
<li>文件裁剪优化</li>
</ul>
</li>
<li>查询<ul>
<li>缓存</li>
<li>倒排索引</li>
<li>存储模型，segment合并，按时间序分层合并</li>
<li>执行引擎优化，index sorting + after key + 提前中断</li>
<li>文件裁剪优化</li>
</ul>
</li>
</ul>
<h4 id="（4）时序特性"><a href="#（4）时序特性" class="headerlink" title="（4）时序特性"></a>（4）时序特性</h4><p>时序场景管理能力</p>
<ul>
<li>metric封装</li>
<li>按时间滚动生成子表</li>
<li>自动产生自动销毁</li>
<li>过期自动清理</li>
</ul>
<h4 id="（5）聚合"><a href="#（5）聚合" class="headerlink" title="（5）聚合"></a>（5）聚合</h4><p>rollup</p>
<ul>
<li>流式聚合（分页并发）</li>
<li>查询剪枝（segment）</li>
<li>index sorting（提前中断）</li>
<li>routing（分片级并发）</li>
</ul>
<h4 id="6-CTSDB-manager"><a href="#6-CTSDB-manager" class="headerlink" title="(6) CTSDB manager"></a>(6) CTSDB manager</h4><p>每个地域一个<br>功能：</p>
<ul>
<li>任务下发</li>
<li>index自动创建/删除</li>
<li>变配</li>
<li>监控</li>
<li>发货</li>
</ul>
<h4 id="（7）CTSDB-GATEWAY"><a href="#（7）CTSDB-GATEWAY" class="headerlink" title="（7）CTSDB-GATEWAY"></a>（7）CTSDB-GATEWAY</h4><p>VPC网络：安全性<br>VPC的VIP：负载均衡</p>
]]></content>
      <categories>
        <category>答辩</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>big-data</tag>
      </tags>
  </entry>
  <entry>
    <title>OMS-GATEWAY</title>
    <url>/2021/11/09/oms/</url>
    <content><![CDATA[<h2 id="1-架构"><a href="#1-架构" class="headerlink" title="1. 架构"></a>1. 架构</h2><p>oms-api：oms协议的封装<br>oms-gateway：网关，服务发现，负载均衡，统一鉴权<br>oms应用框架：子服务框架，oms协议，服务发现协议</p>
<h2 id="2-容灾"><a href="#2-容灾" class="headerlink" title="2. 容灾"></a>2. 容灾</h2><h4 id="（1）自身集群"><a href="#（1）自身集群" class="headerlink" title="（1）自身集群"></a>（1）自身集群</h4><p>L5访问网关，网关切换，域名<br>集群，多机器组成，同步子服务信息</p>
<h4 id="（2）子服务"><a href="#（2）子服务" class="headerlink" title="（2）子服务"></a>（2）子服务</h4><ul>
<li>子服务信息保存在内存中</li>
<li>同步协议，同步子服务信息到其他网关机器中</li>
<li>子服务同步其他子服务信息到本地</li>
<li>网关检查子服务上报的心跳，剔除</li>
<li>客户端缓存</li>
</ul>
<h2 id="3-路由"><a href="#3-路由" class="headerlink" title="3. 路由"></a>3. 路由</h2><h4 id="（1）就近路由"><a href="#（1）就近路由" class="headerlink" title="（1）就近路由"></a>（1）就近路由</h4><p>根据网关所在机房，相同地理信息的子服务<br>负载均衡，轮询选择IP</p>
<h4 id="（2）指定机房路由"><a href="#（2）指定机房路由" class="headerlink" title="（2）指定机房路由"></a>（2）指定机房路由</h4><h2 id="4-鉴权"><a href="#4-鉴权" class="headerlink" title="4. 鉴权"></a>4. 鉴权</h2><p>权限控制：统一鉴权中心 + 配置（白名单，人工）<br>客户端身份的鉴定 + 被访问服务的权限控制<br>网关对子服务鉴权，agent</p>
]]></content>
      <categories>
        <category>答辩</category>
        <category>OMS</category>
      </categories>
      <tags>
        <tag>oms</tag>
      </tags>
  </entry>
  <entry>
    <title>other-trace-systems</title>
    <url>/2021/11/09/other-trace-systems/</url>
    <content><![CDATA[<h2 id="1-业界其他"><a href="#1-业界其他" class="headerlink" title="1. 业界其他"></a>1. 业界其他</h2><h4 id="（1）zipkin"><a href="#（1）zipkin" class="headerlink" title="（1）zipkin"></a>（1）zipkin</h4><p>公司：Twitter</p>
<p>缺点：</p>
<ul>
<li>基于java开发，不支持C++</li>
<li>http上报，消耗性能</li>
<li>拦截请求，入侵强</li>
<li>支持trace，不支持监控告警</li>
</ul>
<h4 id="（2）鹰眼"><a href="#（2）鹰眼" class="headerlink" title="（2）鹰眼"></a>（2）鹰眼</h4><p>公司：阿里<br>特单：存储在HBASE<br>缺点：不开源</p>
<h4 id="（3）Pinpoint"><a href="#（3）Pinpoint" class="headerlink" title="（3）Pinpoint"></a>（3）Pinpoint</h4><p>公司：韩国</p>
<p>优点：</p>
<ul>
<li>字节码注入，无侵入</li>
<li>存储使用hbase</li>
</ul>
<p>缺点：</p>
<ul>
<li>仅支持java服务，不支持C++</li>
<li>不支持查询单个调用链</li>
<li>不兼容OpenTracing</li>
<li>不支持trace</li>
</ul>
<h4 id="（4）CAT"><a href="#（4）CAT" class="headerlink" title="（4）CAT"></a>（4）CAT</h4><p>公司：美团</p>
<p>优点：基于JAVA开发，支持多种语言</p>
<p>缺点：</p>
<ul>
<li>埋点，代码入侵强</li>
<li>文档少，资料混乱</li>
<li>停止维护</li>
</ul>
<h4 id="（5）Dapper"><a href="#（5）Dapper" class="headerlink" title="（5）Dapper"></a>（5）Dapper</h4><p>公司：谷歌<br>缺点：不开源</p>
<h4 id="（6）Opencensus"><a href="#（6）Opencensus" class="headerlink" title="（6）Opencensus"></a>（6）Opencensus</h4><p>公司：谷歌</p>
<p>优点：开源</p>
<p>缺点：</p>
<ul>
<li>无架构梳理</li>
<li>不支持日志</li>
<li>基于agent/controller，依赖重，耦合度高，灵活度低</li>
</ul>
<h4 id="（7）skywalking"><a href="#（7）skywalking" class="headerlink" title="（7）skywalking"></a>（7）skywalking</h4><p>公司：华为</p>
<p>优点：</p>
<ul>
<li>JAVA字节码注入，无侵入</li>
<li>兼容OpenTracing</li>
</ul>
<p>缺点：</p>
<ul>
<li>依赖多</li>
<li>不支持C++</li>
</ul>
<h4 id="（8）Jaeger"><a href="#（8）Jaeger" class="headerlink" title="（8）Jaeger"></a>（8）Jaeger</h4><p>公司：Uber</p>
<p>优点：</p>
<ul>
<li>支持多种语言，golang开发</li>
<li>兼容OpenTracing</li>
</ul>
<p>缺点：</p>
<ul>
<li>拦截请求，入侵强</li>
<li>支持trace，不支持监控告警</li>
</ul>
<h4 id="（9）clickhouse"><a href="#（9）clickhouse" class="headerlink" title="（9）clickhouse"></a>（9）clickhouse</h4><p>介绍：面向列的数据库管理系统，用于在线分析查询</p>
<p>优点</p>
<ul>
<li>开源</li>
<li>查询速度快</li>
<li>容错性高</li>
<li>可靠性强</li>
<li>扩展性高</li>
<li>易用性高</li>
<li>支持SQL，在线查询，近似计算</li>
</ul>
<p>缺点</p>
<ul>
<li>不支持事务</li>
<li>修改/删除支持差</li>
</ul>
<h2 id="2-公司内部"><a href="#2-公司内部" class="headerlink" title="2. 公司内部"></a>2. 公司内部</h2><h4 id="（1）-天机阁1-0"><a href="#（1）-天机阁1-0" class="headerlink" title="（1） 天机阁1.0"></a>（1） 天机阁1.0</h4><ul>
<li>zipkin协议 + 鹰眼架构</li>
<li>需要SDK和agent，外部依赖重</li>
<li>只有trace，无log和metric</li>
<li>数据延迟60s</li>
<li>不支持私有化</li>
<li>不支持多租户</li>
</ul>
<h4 id="（2）-天机阁2-0"><a href="#（2）-天机阁2-0" class="headerlink" title="（2） 天机阁2.0"></a>（2） 天机阁2.0</h4><ul>
<li>2020年底上线</li>
<li>IP相关需要自行扩展</li>
<li>数据不标准，需要特殊处理</li>
<li>安全性/主题区分需要考虑</li>
</ul>
]]></content>
      <categories>
        <category>答辩</category>
        <category>模调</category>
      </categories>
      <tags>
        <tag>trace</tag>
        <tag>system</tag>
      </tags>
  </entry>
  <entry>
    <title>慢查询 &amp; 限流 &amp; 限频</title>
    <url>/2021/11/09/search/</url>
    <content><![CDATA[<h2 id="1-慢查询"><a href="#1-慢查询" class="headerlink" title="1. 慢查询"></a>1. 慢查询</h2><h4 id="（1）ctsdb：30s超时"><a href="#（1）ctsdb：30s超时" class="headerlink" title="（1）ctsdb：30s超时"></a>（1）ctsdb：30s超时</h4><p>影响：CPU，内存</p>
<p>优化：</p>
<ul>
<li>索引，不用通配符</li>
<li>agg改成composite</li>
<li>分片数据</li>
<li>聚合拆分成多个，避免分桶太多</li>
<li>独立协调节点</li>
<li>routing</li>
<li>增加刷新间隔</li>
<li>配置熔断：内存限制</li>
</ul>
<h4 id="（2）fmha"><a href="#（2）fmha" class="headerlink" title="（2）fmha"></a>（2）fmha</h4><p>影响：session长期占用，cpu、内存升高，可用性降低</p>
<p>优化：</p>
<ul>
<li>主键</li>
<li>索引减少like</li>
<li>拆表/中间表</li>
<li>查询分解</li>
<li>limit优化</li>
</ul>
<h2 id="2-限流"><a href="#2-限流" class="headerlink" title="2. 限流"></a>2. 限流</h2><h4 id="（1）接口限流"><a href="#（1）接口限流" class="headerlink" title="（1）接口限流"></a>（1）接口限流</h4><ul>
<li>计数算法：简单</li>
<li>滑动窗口：存储空间大</li>
<li>漏桶算法</li>
<li>令牌桶：允许一定程度的并发</li>
</ul>
<h4 id="（2）数据上报限流"><a href="#（2）数据上报限流" class="headerlink" title="（2）数据上报限流"></a>（2）数据上报限流</h4><p>writer：</p>
<ul>
<li>RateLimiter，令牌桶</li>
<li>2w/s/线程</li>
</ul>
<p>processor：</p>
<ul>
<li>writer queue满了，熔断，蓄水池</li>
<li>恢复，writer queue</li>
<li>蓄水池，writer queue</li>
</ul>
<p>Loader：</p>
<ul>
<li>LoadQuata，数值判断大小</li>
<li>6w/s/线程</li>
</ul>
]]></content>
      <categories>
        <category>答辩</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>search</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>flink &amp; spark &amp; storm &amp; oceanus &amp; 缓存</title>
    <url>/2021/11/09/stream-computing/</url>
    <content><![CDATA[<h2 id="1-flink"><a href="#1-flink" class="headerlink" title="1. flink"></a>1. flink</h2><p>流式模型：原生流处理，一条一条处理<br>数据处理保证：高，有且仅有一次，检查点机制<br>容错性：中等，checkpoint，快照<br>容错开销：低，小批量数据（轻量级，不阻塞流，checkpoint异步，不影响吞吐量）<br>延时：低，一条一条处理<br>吞吐量：高，缓存块 + 超时值</p>
<h2 id="2-spark"><a href="#2-spark" class="headerlink" title="2. spark"></a>2. spark</h2><p>流式模型：微批处理<br>数据处理保证：高，有且仅有一次，重新计算<br>容错性：高，RDD checkpoint（弹性分布式数据集）（通过整个数据集的计算流程的血缘关系实现重建）<br>容错开销：中等（有状态计算需要额外的RDD维护状态，影响吞吐）<br>延时：中等，小批次处理<br>吞吐量：高，微批次</p>
<h2 id="3-storm"><a href="#3-storm" class="headerlink" title="3. storm"></a>3. storm</h2><p>流式模型：原生流处理<br>数据处理保证：中等，至少一次，重复<br>容错性：中等，上有数据备份 + ACK<br>容错开销：高，ACK（所有节点每个节点ACK一次，每条data都做ACK）<br>延时：低，一条一条处理<br>吞吐量：低，ACK，容错影响<br>易用性：低，遵循topology</p>
<h2 id="4-oceanus"><a href="#4-oceanus" class="headerlink" title="4. oceanus"></a>4. oceanus</h2><p>版本支持：外部最新1.13.2，内部还在1.0.9<br>特性支持：不足<br>运维：值班制度<br>其他：小bug多</p>
]]></content>
      <categories>
        <category>答辩</category>
        <category>流式计算</category>
      </categories>
      <tags>
        <tag>stream-computing</tag>
      </tags>
  </entry>
  <entry>
    <title>TDW &amp; Hermes</title>
    <url>/2021/11/09/tdw-hermes/</url>
    <content><![CDATA[<h2 id="1-经过三层存储"><a href="#1-经过三层存储" class="headerlink" title="1. 经过三层存储"></a>1. 经过三层存储</h2><h2 id="2-tdw性能差"><a href="#2-tdw性能差" class="headerlink" title="2. tdw性能差"></a>2. tdw性能差</h2><p>tdw基于hive，hdfs</p>
<h2 id="3-hermes性能差"><a href="#3-hermes性能差" class="headerlink" title="3. hermes性能差"></a>3. hermes性能差</h2><p>基于HDFS，比不上本地文件系统<br>tdw -&gt; hermes，LZ离线导入，提交MR任务构建索引，受资源池影响，还需要进行索引合并</p>
]]></content>
      <categories>
        <category>答辩</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>big-data</tag>
      </tags>
  </entry>
  <entry>
    <title>权限 &amp; 数据安全</title>
    <url>/2021/11/09/%E6%9D%83%E9%99%90-%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h2 id="1-权限"><a href="#1-权限" class="headerlink" title="1. 权限"></a>1. 权限</h2><ul>
<li>web：权限系统</li>
<li>openapi：鉴权系统 + 配置</li>
<li>CTSDB：用户名密码</li>
<li>CKV+：用户名密码</li>
<li>FMHA：强密码</li>
</ul>
<h2 id="2-安全"><a href="#2-安全" class="headerlink" title="2. 安全"></a>2. 安全</h2><h4 id="（1）存储安全"><a href="#（1）存储安全" class="headerlink" title="（1）存储安全"></a>（1）存储安全</h4><ul>
<li>kafka<ul>
<li>副本 + leader</li>
<li>加密（SSL，影响性能） + 身份验证 + 授权</li>
</ul>
</li>
<li>ctsdb<ul>
<li>副本 + 选举</li>
<li>密码 + VPC网络隔离</li>
<li>身份认证 + 用户鉴权</li>
</ul>
</li>
<li>FMHA<ul>
<li>一地三中心</li>
<li>密码 + 防火墙</li>
<li>半同步 + GTID + read_only</li>
</ul>
</li>
<li>ckv+<ul>
<li>数据同步：异步 + 强一致</li>
<li>数据备份：本地快照 + 冷备</li>
<li>副本分片：主备切换</li>
</ul>
</li>
</ul>
<h4 id="（2）信息安全"><a href="#（2）信息安全" class="headerlink" title="（2）信息安全"></a>（2）信息安全</h4><p>数据隔离：权限<br>环境：部署<br>事后审计</p>
<h4 id="（3）传输安全"><a href="#（3）传输安全" class="headerlink" title="（3）传输安全"></a>（3）传输安全</h4><p>kafka：加密 + SSL<br>FMHA：加密<br>CTSDB：内部TLS + 外部HTTPS<br>ckv+：无</p>
<h4 id="（4）数据泄露措施"><a href="#（4）数据泄露措施" class="headerlink" title="（4）数据泄露措施"></a>（4）数据泄露措施</h4><ul>
<li>冻结设备，断网</li>
<li>开启日志记录，开启审计</li>
<li>修改密码</li>
<li>确定数据泄露影响</li>
<li>检查防火墙/子网隔离/杀毒软件/告警</li>
<li>及时汇报</li>
<li>发布公告</li>
</ul>
<h4 id="（5）数据库防篡改"><a href="#（5）数据库防篡改" class="headerlink" title="（5）数据库防篡改"></a>（5）数据库防篡改</h4><ul>
<li>开启数据库log日志记录功能</li>
<li>开启端口的安全策略，限制对外开放</li>
<li>账户管理，授权</li>
<li>数字签名</li>
<li>防火墙</li>
</ul>
]]></content>
      <categories>
        <category>答辩</category>
        <category>安全</category>
      </categories>
      <tags>
        <tag>auth</tag>
        <tag>data-safe</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL+TLS+HTTPS</title>
    <url>/2021/11/10/SSL-TLS-HTTPS/</url>
    <content><![CDATA[<h2 id="1-HTTPS"><a href="#1-HTTPS" class="headerlink" title="1. HTTPS"></a>1. HTTPS</h2><p>HTTP + 加密 + 认证 + 完整性保护 = HTTPS</p>
<p>HTTP，四层，从上到下为：应用层，HTTP，，TCP，IP<br>HTTPS，五层，从上到下为：应用层，HTTP，SSL，TCP，IP</p>
<h2 id="2-SSL-TLS"><a href="#2-SSL-TLS" class="headerlink" title="2. SSL/TLS"></a>2. SSL/TLS</h2><p>HTTP和TCP之间的中转协议，应用层协议</p>
<h2 id="3-TLS"><a href="#3-TLS" class="headerlink" title="3. TLS"></a>3. TLS</h2><p>TLS是SSL的升级版</p>
]]></content>
      <categories>
        <category>答辩</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>ssl</tag>
        <tag>ttl</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>oop原则 &amp; cap原理</title>
    <url>/2021/11/10/oop/</url>
    <content><![CDATA[<h1 id="oop：Object-Oriented-Programming-面向对象编程"><a href="#oop：Object-Oriented-Programming-面向对象编程" class="headerlink" title="oop：Object Oriented Programming 面向对象编程"></a>oop：Object Oriented Programming 面向对象编程</h1><h2 id="1-单一职责"><a href="#1-单一职责" class="headerlink" title="1. 单一职责"></a>1. 单一职责</h2><p>功能专一，易于复用和重构</p>
<h2 id="2-开闭原则"><a href="#2-开闭原则" class="headerlink" title="2. 开闭原则"></a>2. 开闭原则</h2><p>在类的设计理念，哪些行为是允许的，哪些行为是不允许的<br>达到类可维护，可扩展，可复用的目的</p>
<h2 id="3-里式替换"><a href="#3-里式替换" class="headerlink" title="3. 里式替换"></a>3. 里式替换</h2><p>在类的设计中，子类型必须能够替换父类型</p>
<h2 id="4-依赖倒置"><a href="#4-依赖倒置" class="headerlink" title="4. 依赖倒置"></a>4. 依赖倒置</h2><p>在类的设计上，应当面向接口编程，而不是面向实现<br>高层模块不应该依赖底层模块，两者应该依赖其抽象<br>抽象不应该依赖细节，细节应该依赖抽象</p>
<h2 id="5-接口隔离"><a href="#5-接口隔离" class="headerlink" title="5. 接口隔离"></a>5. 接口隔离</h2><p>在接口设计中，应当杜绝不必要的接口</p>
<h2 id="6-迪米特法则"><a href="#6-迪米特法则" class="headerlink" title="6. 迪米特法则"></a>6. 迪米特法则</h2><p>在类的设计中，调用类不需要知道被调用类的内部实现或者具体的实例对象</p>
<h1 id="CAP原理"><a href="#CAP原理" class="headerlink" title="CAP原理"></a>CAP原理</h1><p>分布式系统中</p>
<ul>
<li>Consistency一致性</li>
<li>Availability可用性，</li>
<li>Partition tolerance容错性</li>
</ul>
]]></content>
      <categories>
        <category>答辩</category>
        <category>原理</category>
      </categories>
      <tags>
        <tag>oop</tag>
        <tag>cap</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务一致性解决方案</title>
    <url>/2021/11/10/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="1-数据一致性"><a href="#1-数据一致性" class="headerlink" title="1. 数据一致性"></a>1. 数据一致性</h2><p>主库、从库、缓存数据一致性<br>多副本数据一致性<br>分布式服务的数据一致性</p>
<h2 id="2-概念"><a href="#2-概念" class="headerlink" title="2. 概念"></a>2. 概念</h2><p>强一致性<br>弱一致性<br>最终一致性</p>
<h2 id="3-原理"><a href="#3-原理" class="headerlink" title="3. 原理"></a>3. 原理</h2><ul>
<li>事务的ACID特性<ul>
<li>原子性（Atomicity）</li>
<li>一致性（Consistency）</li>
<li>隔离性（Isolation）</li>
<li>持久性（Durability）</li>
</ul>
</li>
<li>CAP定理，无法同时满足<ul>
<li>Consistency，一致性</li>
<li>Availability，可用性</li>
<li>Partition tolerance，分区容错性</li>
</ul>
</li>
<li>BASE理论：BASE 理论是针对 NoSQL 数据库而言的，它是对 CAP 理论中一致性（C）和可用性（A）进行权衡的结果<ul>
<li>基本可用（Basically Available）</li>
<li>软状态（Soft-state）</li>
<li>最终一致性（Eventually Consistent）</li>
</ul>
</li>
</ul>
<h2 id="4-协议"><a href="#4-协议" class="headerlink" title="4. 协议"></a>4. 协议</h2><ul>
<li>两阶段提交</li>
<li>三阶段提交</li>
<li>TCC</li>
<li>Paxos</li>
<li>ZAB：zk使用</li>
<li>Raft：先选出主节点</li>
<li>Quorum</li>
<li>Gossip</li>
</ul>
<h2 id="5-强一致性方案"><a href="#5-强一致性方案" class="headerlink" title="5. 强一致性方案"></a>5. 强一致性方案</h2><h3 id="（1）2PC，二阶段提交协议"><a href="#（1）2PC，二阶段提交协议" class="headerlink" title="（1）2PC，二阶段提交协议"></a>（1）2PC，二阶段提交协议</h3><ul>
<li>阶段一：Prepare，准备，投票</li>
<li>阶段二：Commit/Cancel，提交，回滚<br>缺点：阻塞范围广，不适合高并发场景</li>
</ul>
<h3 id="（2）DTP-XA规范"><a href="#（2）DTP-XA规范" class="headerlink" title="（2）DTP/XA规范"></a>（2）DTP/XA规范</h3><ul>
<li>AP：应用程序</li>
<li>RMS：资源管理器，参与者</li>
<li>TM：事务管理器，协调者</li>
<li>XA：组件之间香菇操作的接口</li>
</ul>
<h2 id="6-最终一致性方案"><a href="#6-最终一致性方案" class="headerlink" title="6. 最终一致性方案"></a>6. 最终一致性方案</h2><h3 id="（1）TCC"><a href="#（1）TCC" class="headerlink" title="（1）TCC"></a>（1）TCC</h3><ul>
<li>T：try，锁定资源</li>
<li>C：Confirm，确认，补偿</li>
<li>C：Cancel<br>阻塞时间范围短，性能比2PC有提升</li>
</ul>
<h3 id="（2）本地事务状态表"><a href="#（2）本地事务状态表" class="headerlink" title="（2）本地事务状态表"></a>（2）本地事务状态表</h3><p>调用方调用分布式事务之前，将待执行的事务流程和状态信息，存储到数据库中，之后每次调用成功，更新对应的事务状态，失败则终止</p>
<h3 id="（3）消息中间件"><a href="#（3）消息中间件" class="headerlink" title="（3）消息中间件"></a>（3）消息中间件</h3><ul>
<li>消息中间件，不支持事务</li>
<li>消息中间件，支持事务：定时任务的工作交给消息中间件来提供</li>
</ul>
<h2 id="7-弱一致性方案"><a href="#7-弱一致性方案" class="headerlink" title="7. 弱一致性方案"></a>7. 弱一致性方案</h2><h3 id="（1）基于状态的补偿"><a href="#（1）基于状态的补偿" class="headerlink" title="（1）基于状态的补偿"></a>（1）基于状态的补偿</h3><p>事后处理机制</p>
<h3 id="（2）重试（-回滚）-告警-人工修复"><a href="#（2）重试（-回滚）-告警-人工修复" class="headerlink" title="（2）重试（+回滚） + 告警 + 人工修复"></a>（2）重试（+回滚） + 告警 + 人工修复</h3><p>放弃一致性<br>成本最低，最被动</p>
<h3 id="（3）事后处理"><a href="#（3）事后处理" class="headerlink" title="（3）事后处理"></a>（3）事后处理</h3><p>对账</p>
<h2 id="7-结论"><a href="#7-结论" class="headerlink" title="7. 结论"></a>7. 结论</h2><p>数据一致性要求高：金融银行，2PC，强一致性方案<br>可用性 + 一致性：互联网应用，Base理论，最终一致性<br>极端场景：业务特性，弱一致性</p>
]]></content>
      <categories>
        <category>答辩</category>
        <category>分布式事务</category>
      </categories>
      <tags>
        <tag>distributed computing</tag>
      </tags>
  </entry>
  <entry>
    <title>容灾和数据一致性</title>
    <url>/2021/11/10/%E5%AE%B9%E7%81%BE/</url>
    <content><![CDATA[<h2 id="1-成果"><a href="#1-成果" class="headerlink" title="1. 成果"></a>1. 成果</h2><h3 id="（1）服务部署层面"><a href="#（1）服务部署层面" class="headerlink" title="（1）服务部署层面"></a>（1）服务部署层面</h3><p>服务的多活部署，拥有容灾能力</p>
<h3 id="（2）低成本容灾"><a href="#（2）低成本容灾" class="headerlink" title="（2）低成本容灾"></a>（2）低成本容灾</h3><p>ng/svr多园区部署<br>L5剔除<br>单机故障演戏</p>
<h3 id="（3）高成本的未做"><a href="#（3）高成本的未做" class="headerlink" title="（3）高成本的未做"></a>（3）高成本的未做</h3><p>CTSDB/CKV+，外部门，演戏成本高</p>
<h3 id="（4）无上海机房"><a href="#（4）无上海机房" class="headerlink" title="（4）无上海机房"></a>（4）无上海机房</h3><p>中心设备分布决定<br>满足了深圳多园区的容灾要求</p>
<h3 id="（5）FMHA"><a href="#（5）FMHA" class="headerlink" title="（5）FMHA"></a>（5）FMHA</h3><p>只存储配置相关的数据，要求不高</p>
<h3 id="（6）CTSDB-CKV"><a href="#（6）CTSDB-CKV" class="headerlink" title="（6）CTSDB/CKV+"></a>（6）CTSDB/CKV+</h3><p>多园区容灾部署<br>成本考虑</p>
<h2 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2. 域名解析"></a>2. 域名解析</h2><p>DNS解析服务：机器故障，5min剔除，慢</p>
<h2 id="3-TGW"><a href="#3-TGW" class="headerlink" title="3. TGW"></a>3. TGW</h2><h3 id="（1）自己"><a href="#（1）自己" class="headerlink" title="（1）自己"></a>（1）自己</h3><p>一个集群4台TGW，每台TGW与其他三台TGW实时同步会话信息</p>
<h3 id="（2）下游服务"><a href="#（2）下游服务" class="headerlink" title="（2）下游服务"></a>（2）下游服务</h3><p>周期性探测server的状态，1min<br>从客服务列表中剔除故障server<br>检测服务恢复正常，自动加回可服务列表</p>
<h2 id="4-智能网关"><a href="#4-智能网关" class="headerlink" title="4. 智能网关"></a>4. 智能网关</h2><p>多集群部署</p>
<h3 id="（1）容灾"><a href="#（1）容灾" class="headerlink" title="（1）容灾"></a>（1）容灾</h3><h4 id="自己"><a href="#自己" class="headerlink" title="自己"></a>自己</h4><p>多园区部署<br>深圳主集群，天津灾备</p>
<h4 id="下游服务"><a href="#下游服务" class="headerlink" title="下游服务"></a>下游服务</h4><ul>
<li>心跳检测机制</li>
<li>同一个进程，三次发送到同一个IP的请求均连接失败，就踢掉该IP，请求不会发送到故障服务器</li>
<li>智能路由转发</li>
</ul>
<h3 id="（2）其他功能"><a href="#（2）其他功能" class="headerlink" title="（2）其他功能"></a>（2）其他功能</h3><ul>
<li>TOF统一身份认证</li>
<li>鉴权，员工身份信息</li>
<li>共享登录态</li>
<li>智能路由转发</li>
</ul>
<h2 id="5-nginx"><a href="#5-nginx" class="headerlink" title="5. nginx"></a>5. nginx</h2><p>两地四中心 + 智能网关心跳检测</p>
<h3 id="（1）上游"><a href="#（1）上游" class="headerlink" title="（1）上游"></a>（1）上游</h3><p>智能网关</p>
<h3 id="（2）自己"><a href="#（2）自己" class="headerlink" title="（2）自己"></a>（2）自己</h3><p>多园区部署，多城市部署</p>
<h3 id="（3）下游"><a href="#（3）下游" class="headerlink" title="（3）下游"></a>（3）下游</h3><ul>
<li>异常重试：4次，服务器列表根据权重轮询</li>
<li>停止重试：请求时间60S/重试次数4次</li>
<li>踢掉策略：超时2s，认为失败，踢掉</li>
<li>恢复策略：屏蔽10s，重新加入存活服务器列表</li>
</ul>
<h2 id="6-权限系统"><a href="#6-权限系统" class="headerlink" title="6. 权限系统"></a>6. 权限系统</h2><p>降级登录（探测OA，302次数超过阈值）<br>智能网关开启免登陆</p>
<h2 id="7-北极星"><a href="#7-北极星" class="headerlink" title="7. 北极星"></a>7. 北极星</h2><h2 id="8-L5"><a href="#8-L5" class="headerlink" title="8. L5"></a>8. L5</h2><h3 id="（1）容灾-1"><a href="#（1）容灾-1" class="headerlink" title="（1）容灾"></a>（1）容灾</h3><h4 id="自己-1"><a href="#自己-1" class="headerlink" title="自己"></a>自己</h4><p>agent挂了，从文件中读取路由信息</p>
<h4 id="下游"><a href="#下游" class="headerlink" title="下游"></a>下游</h4><ul>
<li>故障剔除：连续上报10次失败 / 1min失败&gt;50%</li>
<li>故障恢复：每10s对网络层探测，ok则逐步放量请求</li>
</ul>
<h3 id="（2）其他功能-1"><a href="#（2）其他功能-1" class="headerlink" title="（2）其他功能"></a>（2）其他功能</h3><ul>
<li>负载均衡：空闲状态</li>
<li>过载保护：回包状态 =》 一个周期内不给服务提供者分配请求</li>
<li>路由策略：配置 + 权重 + 轮询</li>
<li>全部服务过载，降级，一个周期内不再返回可用路由</li>
</ul>
<h2 id="9-CL5"><a href="#9-CL5" class="headerlink" title="9. CL5"></a>9. CL5</h2><h3 id="（1）容灾-2"><a href="#（1）容灾-2" class="headerlink" title="（1）容灾"></a>（1）容灾</h3><h4 id="故障剔除"><a href="#故障剔除" class="headerlink" title="故障剔除"></a>故障剔除</h4><p>一个周期内，错误率大于某个阈值，或者连续错误多少次，节点故障</p>
<h4 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h4><p>ping探测宕机节点<br>连通，放少量流量，后逐渐恢复正常</p>
<h3 id="（2）其他功能-2"><a href="#（2）其他功能-2" class="headerlink" title="（2）其他功能"></a>（2）其他功能</h3><ul>
<li>负载均衡：静态权重（配置） + 动态权重（成功率，耗时）</li>
<li>过载保护：降级</li>
</ul>
<h2 id="10-openapi-oms网关"><a href="#10-openapi-oms网关" class="headerlink" title="10. openapi/oms网关"></a>10. openapi/oms网关</h2><p>oms网关：多集群部署 + L5切换<br>openapi：两地四中心 + oms网关全量信息</p>
<h3 id="（1）网关"><a href="#（1）网关" class="headerlink" title="（1）网关"></a>（1）网关</h3><ul>
<li>网关集群：L5切换</li>
<li>网关子服务：<ul>
<li>每套网关多台服务器</li>
<li>每个网关机器都有全量子服务信息</li>
</ul>
</li>
</ul>
<h3 id="（2）服务端"><a href="#（2）服务端" class="headerlink" title="（2）服务端"></a>（2）服务端</h3><ul>
<li>服务注册<ul>
<li>保存服务信息到本地</li>
<li>同步协议，同步服务信息到其他网关机器</li>
<li>子服务从网关同步到其他子服务</li>
</ul>
</li>
<li>心跳检测<ul>
<li>网关定时检测子服务心跳，剔除无心跳服务</li>
<li>子服务定期发送心跳</li>
</ul>
</li>
<li>客户端缓存</li>
</ul>
<h2 id="11-日志写入服务"><a href="#11-日志写入服务" class="headerlink" title="11. 日志写入服务"></a>11. 日志写入服务</h2><p>两地两中心 + 消费者组机制</p>
<p>异常重试：CTSDB<br>容灾：消费者组，rebalance</p>
<h2 id="12-日志查询服务"><a href="#12-日志查询服务" class="headerlink" title="12. 日志查询服务"></a>12. 日志查询服务</h2><p>两地四中心 + nginx配置（故障剔除）</p>
<p>异常重试：nginx，4次<br>容灾：</p>
<ul>
<li>故障剔除：2s，1次</li>
<li>故障恢复：10s</li>
</ul>
<h2 id="13-CTSDB"><a href="#13-CTSDB" class="headerlink" title="13. CTSDB"></a>13. CTSDB</h2><p>支持多地域部署 + 多副本 + 选举</p>
<h3 id="（1）容灾-3"><a href="#（1）容灾-3" class="headerlink" title="（1）容灾"></a>（1）容灾</h3><ul>
<li>集群：多园区容灾</li>
<li>城市：不同地域相互隔离，多园区</li>
<li>机房：多可用区部署</li>
<li>单台机器：<ul>
<li>master：选举，投票（id排序，Bully算法）</li>
<li>primary：副本 + 选举<ul>
<li>动态更新 =》 IS列表 =》 master将服务提升为primary（最新的UUID）</li>
<li>master复制一个副本，分配在节点</li>
</ul>
</li>
<li>replica：同上</li>
</ul>
</li>
</ul>
<h3 id="（2）数据一致性"><a href="#（2）数据一致性" class="headerlink" title="（2）数据一致性"></a>（2）数据一致性</h3><ul>
<li>主副本分片：强一致</li>
<li>写入，主副本都失败，重试</li>
<li>写入，主成功，备失败<ul>
<li>强一致：失败，重试</li>
<li>非强一致：<ul>
<li>副本故障，移除in-sync</li>
<li>不对外提供查询，后续异步恢复</li>
<li>master分配新的副本</li>
<li>IS存在集群元信息中，master维护</li>
<li>写入副本失败，从IS中剔除，动态更新IS列表</li>
</ul>
</li>
</ul>
</li>
<li>写入，主备都成功，成功</li>
</ul>
<h3 id="（3）返回成功，数据没有flush到磁盘"><a href="#（3）返回成功，数据没有flush到磁盘" class="headerlink" title="（3）返回成功，数据没有flush到磁盘"></a>（3）返回成功，数据没有flush到磁盘</h3><p>translog（日志文件） + commit point</p>
<h3 id="（4）-全部失败"><a href="#（4）-全部失败" class="headerlink" title="（4） 全部失败"></a>（4） 全部失败</h3><p>备份，快照</p>
<h2 id="14-FMHA"><a href="#14-FMHA" class="headerlink" title="14. FMHA"></a>14. FMHA</h2><p>一地三中心 + 半同步 + 主备切换 + CTSDB</p>
<h3 id="（1）容灾-4"><a href="#（1）容灾-4" class="headerlink" title="（1）容灾"></a>（1）容灾</h3><ul>
<li>跨城：名字服务DNS + agent上报心跳</li>
<li>跨IDC：权重 + 名字服务DNS + agent上报心跳</li>
<li>跨机：<ul>
<li>主从切换，权重 + gtid（Global Transaction Identifier，一个事务对应一个GTID，全局唯一）</li>
<li>数据同步 + 切换</li>
<li>半同步复制</li>
</ul>
</li>
</ul>
<h3 id="（2）数据一致性-1"><a href="#（2）数据一致性-1" class="headerlink" title="（2）数据一致性"></a>（2）数据一致性</h3><p>三园区 + 半同步 + GTID + read_only</p>
<h3 id="（3）卡主"><a href="#（3）卡主" class="headerlink" title="（3）卡主"></a>（3）卡主</h3><p>关闭：主备切换</p>
<h2 id="15-TDW"><a href="#15-TDW" class="headerlink" title="15. TDW"></a>15. TDW</h2><p>多园区容灾 + 自动恢复 + 任务迁移</p>
<h2 id="16-CKV"><a href="#16-CKV" class="headerlink" title="16. CKV+"></a>16. CKV+</h2><p>支持多集群部署 + L5切换 + 分片副本 + 主备切换</p>
<h3 id="（1）容灾-5"><a href="#（1）容灾-5" class="headerlink" title="（1）容灾"></a>（1）容灾</h3><p>副本 + 选举（默认一主一备）<br>副本：默认跨机架，也可跨城</p>
<ul>
<li>客户端L5，自动剔除</li>
<li>集群，跨IDC部署</li>
<li>城市，跨城部署</li>
<li>多机器故障：主备分片同时异常，无法切换<ul>
<li>设备可恢复：本地快照 + 流水</li>
<li>设备不可恢复：冷备文件回档（每天至少一次冷备，保存三天）</li>
</ul>
</li>
<li>单机器故障<ul>
<li>故障检测：master发送心跳，2s间隔，10次四百</li>
<li>设备异常，不可恢复，分片，30s内完成<ul>
<li>主分片，主备切换</li>
<li>备份片，重建</li>
</ul>
</li>
<li>设备异常，可恢复<ul>
<li>秒级恢复，共享内存</li>
<li>分片状态正常，无操作</li>
<li>分片状态修改中，异常<ul>
<li>主分片：剔除主，主备切换</li>
<li>备份片：剔除备，新建备</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="（2）数据一致性-2"><a href="#（2）数据一致性-2" class="headerlink" title="（2）数据一致性"></a>（2）数据一致性</h3><p>异步（默认），强一致（Raft协议，性能损耗大）</p>
<ul>
<li>写入<ul>
<li>主备成功：一致</li>
<li>主挂了：剔除主，主备切换（数据未同步，丢失）</li>
<li>备挂了：剔除备，换备</li>
<li>主备失败：重试</li>
</ul>
</li>
<li>复制中主挂了<ul>
<li>可恢复：秒级恢复</li>
<li>不可恢复： 数据丢失</li>
</ul>
</li>
</ul>
<h3 id="（3）-选举"><a href="#（3）-选举" class="headerlink" title="（3） 选举"></a>（3） 选举</h3><ul>
<li>master<ul>
<li>3个节点，不同机房</li>
<li>创建key，成功则为master</li>
<li>节点异常，TTL到期，其他Follower抢占</li>
</ul>
</li>
</ul>
<h2 id="17-kafka"><a href="#17-kafka" class="headerlink" title="17. kafka"></a>17. kafka</h2><p>多集群部署（两地两中心） + 多副本 + 选举</p>
<h3 id="（1）容灾-6"><a href="#（1）容灾-6" class="headerlink" title="（1）容灾"></a>（1）容灾</h3><p>副本 + 选举</p>
<ul>
<li>controller：zk，创建节点</li>
<li>leader：controller提升副本 + ISR列表（leader维护，zk中也有） + 第一个</li>
<li>follower：再分配follower</li>
</ul>
<h3 id="（2）数据一致性-3"><a href="#（2）数据一致性-3" class="headerlink" title="（2）数据一致性"></a>（2）数据一致性</h3><ul>
<li>leader失败：重试</li>
<li>leader成功，fowller失败：异步 + 重试 + ISR</li>
</ul>
<h2 id="18-集群-set化作用"><a href="#18-集群-set化作用" class="headerlink" title="18. 集群/set化作用"></a>18. 集群/set化作用</h2><ul>
<li>流量拆分</li>
<li>故障隔离</li>
<li>异地容灾</li>
</ul>
]]></content>
      <categories>
        <category>答辩</category>
        <category>容灾</category>
      </categories>
      <tags>
        <tag>disaster tolerance</tag>
      </tags>
  </entry>
  <entry>
    <title>应用设计模式</title>
    <url>/2021/11/10/%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1-创建型：解决对象的创建问题"><a href="#1-创建型：解决对象的创建问题" class="headerlink" title="1. 创建型：解决对象的创建问题"></a>1. 创建型：解决对象的创建问题</h2><h3 id="（1）单例模式"><a href="#（1）单例模式" class="headerlink" title="（1）单例模式"></a>（1）单例模式</h3><p>创建全局唯一的对象<br>实现方式：饿汉式，懒汉式，双重检测，静态内部类，枚举</p>
<h3 id="（2）工厂模式"><a href="#（2）工厂模式" class="headerlink" title="（2）工厂模式"></a>（2）工厂模式</h3><p>简单工厂，工厂方法，抽象工厂<br>用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定参数决定创建哪种类型的对象</p>
<h3 id="（3）建造者模式"><a href="#（3）建造者模式" class="headerlink" title="（3）建造者模式"></a>（3）建造者模式</h3><p>用来创建复杂对象，可以通过设置不同的可选参数，“定制化”地创建不同的参数。<br>将一个复杂对象的构建与他的表示分离，使得同样的创建过程，可以创建不同的表示<br>建立胖小人，瘦小人</p>
<h3 id="（4）原型模式"><a href="#（4）原型模式" class="headerlink" title="（4）原型模式"></a>（4）原型模式</h3><p>对象创建成本比较大，同一个类的不同对象之间的差别不大，可以利用已有对象（原型）进行复制/拷贝的方式，来创建新对象，包括了深拷贝和浅拷贝。</p>
<h2 id="2-结构设计模式：总结了类或者对象组合在一起的经典结构"><a href="#2-结构设计模式：总结了类或者对象组合在一起的经典结构" class="headerlink" title="2. 结构设计模式：总结了类或者对象组合在一起的经典结构"></a>2. 结构设计模式：总结了类或者对象组合在一起的经典结构</h2><h3 id="（1）代理模式"><a href="#（1）代理模式" class="headerlink" title="（1）代理模式"></a>（1）代理模式</h3><p>在不改变原始类接口的条件下，为原始类定义一个代理类，目的是控制访问，而非加强功能。<br>一般用于非功能性需求：日志，监控，统计等等</p>
<h3 id="（2）桥接模式"><a href="#（2）桥接模式" class="headerlink" title="（2）桥接模式"></a>（2）桥接模式</h3><p>将抽象和实现解耦，能独立开发<br>组合优先于继承</p>
<h3 id="（3）装饰器模式"><a href="#（3）装饰器模式" class="headerlink" title="（3）装饰器模式"></a>（3）装饰器模式</h3><p>解决继承关系过于复杂的问题<br>通过组合，代替继承，给原始类添加增强功能</p>
<h3 id="（4）适配器模式"><a href="#（4）适配器模式" class="headerlink" title="（4）适配器模式"></a>（4）适配器模式</h3><p>提供跟原始类不同的接口<br>将不兼容的接口转换为可兼容的接口<br>类适配器（继承） + 对象适配器（组合）</p>
<h3 id="（5）门面模式"><a href="#（5）门面模式" class="headerlink" title="（5）门面模式"></a>（5）门面模式</h3><p>封装细粒度的接口，提供组合各个细粒度接口的高层次接口，来提高接口的易用性</p>
<h3 id="（6）组合模式"><a href="#（6）组合模式" class="headerlink" title="（6）组合模式"></a>（6）组合模式</h3><p>主要用来处理树形结构数据</p>
<h3 id="（7）享元模式"><a href="#（7）享元模式" class="headerlink" title="（7）享元模式"></a>（7）享元模式</h3><p>被共享的单元。<br>复用对象，节省内存，享元对象是不可变对象。</p>
<h2 id="3-行为型设计模式：类或对象之间的交互"><a href="#3-行为型设计模式：类或对象之间的交互" class="headerlink" title="3. 行为型设计模式：类或对象之间的交互"></a>3. 行为型设计模式：类或对象之间的交互</h2><h3 id="（1）观察者类型"><a href="#（1）观察者类型" class="headerlink" title="（1）观察者类型"></a>（1）观察者类型</h3><h3 id="（2）模板模式"><a href="#（2）模板模式" class="headerlink" title="（2）模板模式"></a>（2）模板模式</h3><h3 id="（3）策略模式"><a href="#（3）策略模式" class="headerlink" title="（3）策略模式"></a>（3）策略模式</h3><h3 id="（4）职责链模式"><a href="#（4）职责链模式" class="headerlink" title="（4）职责链模式"></a>（4）职责链模式</h3><p>多个处理器依次处理同一个请求<br>实现过滤器，拦截器</p>
<h3 id="（5）迭代器模式"><a href="#（5）迭代器模式" class="headerlink" title="（5）迭代器模式"></a>（5）迭代器模式</h3><p>游标模式，用来遍历集合对象</p>
<h3 id="（6）状态模式"><a href="#（6）状态模式" class="headerlink" title="（6）状态模式"></a>（6）状态模式</h3><p>用来实现状态机</p>
<h3 id="（7）访问者模式"><a href="#（7）访问者模式" class="headerlink" title="（7）访问者模式"></a>（7）访问者模式</h3><h3 id="（8）备忘录模式"><a href="#（8）备忘录模式" class="headerlink" title="（8）备忘录模式"></a>（8）备忘录模式</h3><p>快照模式<br>用来防丢失，撤销，恢复</p>
<h3 id="（9）命令模式"><a href="#（9）命令模式" class="headerlink" title="（9）命令模式"></a>（9）命令模式</h3><h3 id="（10）解释器模式"><a href="#（10）解释器模式" class="headerlink" title="（10）解释器模式"></a>（10）解释器模式</h3><h3 id="（11）中介模式"><a href="#（11）中介模式" class="headerlink" title="（11）中介模式"></a>（11）中介模式</h3>]]></content>
      <categories>
        <category>答辩</category>
        <category>原理</category>
      </categories>
      <tags>
        <tag>design pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>机型分析</title>
    <url>/2021/11/10/%E6%9C%BA%E5%9E%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="1-计算型"><a href="#1-计算型" class="headerlink" title="1. 计算型"></a>1. 计算型</h2><p>B70，M10：CPU高，内存高</p>
<h2 id="2-存储"><a href="#2-存储" class="headerlink" title="2. 存储"></a>2. 存储</h2><p>Z4（Z3，TS）：磁盘高，SSD高</p>
<h2 id="3-云机器"><a href="#3-云机器" class="headerlink" title="3. 云机器"></a>3. 云机器</h2><h2 id="4-中间层"><a href="#4-中间层" class="headerlink" title="4. 中间层"></a>4. 中间层</h2><p>B6：内存还行</p>
<h2 id="5-虚拟机"><a href="#5-虚拟机" class="headerlink" title="5. 虚拟机"></a>5. 虚拟机</h2><h2 id="6-机型命名-V6-0"><a href="#6-机型命名-V6-0" class="headerlink" title="6. 机型命名 V6.0"></a>6. 机型命名 V6.0</h2><p>CG1L - 10G</p>
<h4 id="（1）第一段：英文，机型特征"><a href="#（1）第一段：英文，机型特征" class="headerlink" title="（1）第一段：英文，机型特征"></a>（1）第一段：英文，机型特征</h4><ul>
<li>计算类：C（Computing），合并B和M（V5.0，内存和CPU好）</li>
<li>存储类：S（Storage）</li>
<li>大数据类：B（Bigdata）</li>
<li>异构类：F（FPGA），G（GPU）</li>
<li>专用类：D（Dedicated，替代Z）</li>
<li>网络类：N（Networking server）</li>
<li>项目类：P（Project），代替原Other机型</li>
</ul>
<h4 id="（2）第二段：业务属性"><a href="#（2）第二段：业务属性" class="headerlink" title="（2）第二段：业务属性"></a>（2）第二段：业务属性</h4><ul>
<li>C类分G：通用，General</li>
<li>S类分热、湿、冷：<ul>
<li>SH，热数据，使用SSD硬盘，TS8X（V5.0）</li>
<li>SW，温数据，TS60，TSH（混合SSD和Sate）</li>
<li>SC，冷数据，使用4T和8T更大硬盘</li>
</ul>
</li>
<li>G类分Traning，Inference和Rendering</li>
</ul>
<h4 id="（3）第三段：数字"><a href="#（3）第三段：数字" class="headerlink" title="（3）第三段：数字"></a>（3）第三段：数字</h4><p>顺排，体现统一业务属性的不同细分场景<br>体现CPU，硬盘，内存</p>
<h4 id="（4）第四段：字母"><a href="#（4）第四段：字母" class="headerlink" title="（4）第四段：字母"></a>（4）第四段：字母</h4><p>非必选，机型小属性，比如液冷用L</p>
<h4 id="（5）第五段：网卡速率"><a href="#（5）第五段：网卡速率" class="headerlink" title="（5）第五段：网卡速率"></a>（5）第五段：网卡速率</h4><h2 id="7-所有机型对比"><a href="#7-所有机型对比" class="headerlink" title="7. 所有机型对比"></a>7. 所有机型对比</h2><table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>用途</th>
<th>CPU</th>
<th>内存</th>
<th>磁盘/SSD</th>
<th>网络类型</th>
</tr>
</thead>
<tbody><tr>
<td>V4-8-100</td>
<td>虚拟机</td>
<td></td>
<td>4</td>
<td>8</td>
<td>100/0</td>
<td>千兆</td>
</tr>
<tr>
<td>V6-15-100</td>
<td>虚拟机</td>
<td></td>
<td>6</td>
<td>15</td>
<td>100/0</td>
<td>千兆</td>
</tr>
<tr>
<td>V8-16-200</td>
<td>虚拟机</td>
<td></td>
<td>8</td>
<td>16</td>
<td>200/0</td>
<td>千兆</td>
</tr>
<tr>
<td>V16-24-300</td>
<td>虚拟机</td>
<td></td>
<td>16</td>
<td>64</td>
<td>300/0</td>
<td>万兆</td>
</tr>
<tr>
<td>V23-128-800</td>
<td>虚拟机</td>
<td></td>
<td>24</td>
<td>128</td>
<td>800/0</td>
<td>万兆</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>A5（停）</td>
<td>实体机</td>
<td>后台数据库</td>
<td>4</td>
<td>32</td>
<td>300*6/0</td>
<td>千兆</td>
</tr>
<tr>
<td>B6</td>
<td>实体机</td>
<td>中间层</td>
<td>2<em>6</em>2</td>
<td>64</td>
<td>300/0</td>
<td>千兆</td>
</tr>
<tr>
<td>B70</td>
<td>实体机</td>
<td>计算</td>
<td>2<em>12</em>2</td>
<td>128</td>
<td>300*6/0</td>
<td>万兆</td>
</tr>
<tr>
<td>C1</td>
<td>实体机</td>
<td>前端接入层</td>
<td>1<em>4</em>2</td>
<td>16</td>
<td>1024</td>
<td>千兆</td>
</tr>
<tr>
<td>M1</td>
<td>实体机</td>
<td>虚拟化，大内存</td>
<td>2<em>6</em>2</td>
<td>128</td>
<td>900/0</td>
<td>千兆</td>
</tr>
<tr>
<td>M2</td>
<td>实体机</td>
<td>虚拟化</td>
<td>2<em>6</em>2</td>
<td>64</td>
<td>900/0</td>
<td>千兆</td>
</tr>
<tr>
<td>M10</td>
<td>实体机</td>
<td>计算</td>
<td>2<em>12</em>2</td>
<td>128</td>
<td>300*6/0</td>
<td>万兆</td>
</tr>
<tr>
<td>TS6</td>
<td>架构部TFS</td>
<td>大存储</td>
<td>1<em>6</em>2</td>
<td>32</td>
<td>2T*12/240</td>
<td>千兆</td>
</tr>
<tr>
<td>TS60</td>
<td>实体机</td>
<td>大存储</td>
<td>24</td>
<td>64</td>
<td>2T*12/80</td>
<td>万兆</td>
</tr>
<tr>
<td>TS8</td>
<td>架构部TSSD/微信</td>
<td>数据库存储</td>
<td>2<em>6</em>2</td>
<td>32</td>
<td>0/300*12</td>
<td>千兆</td>
</tr>
<tr>
<td>TS80</td>
<td>架构部TSSD/微信</td>
<td>数据库存储</td>
<td>24</td>
<td>64</td>
<td>1.8T*4/80</td>
<td>万兆</td>
</tr>
<tr>
<td>TS90</td>
<td>云平台部</td>
<td>存储</td>
<td>24</td>
<td>256</td>
<td>0/800*12</td>
<td>万兆</td>
</tr>
<tr>
<td>TSC1</td>
<td>实体机</td>
<td></td>
<td>12</td>
<td>32</td>
<td>24576/0</td>
<td>千兆</td>
</tr>
<tr>
<td>TSC10</td>
<td>实体机</td>
<td></td>
<td>12</td>
<td>32</td>
<td>24576/240</td>
<td>万兆</td>
</tr>
<tr>
<td>TS5</td>
<td>实体机</td>
<td>存储</td>
<td>2*6</td>
<td>64</td>
<td>2T*12</td>
<td>hadoop使用</td>
</tr>
<tr>
<td>TS9</td>
<td>云平台部</td>
<td>SSD高性能</td>
<td>2*6</td>
<td>128</td>
<td>0/3100（480*8）</td>
<td></td>
</tr>
<tr>
<td>Z3</td>
<td>实体机</td>
<td>互娱存储</td>
<td>24</td>
<td>64</td>
<td>300*2/1228</td>
<td>千兆</td>
</tr>
<tr>
<td>Z30</td>
<td>实体机</td>
<td></td>
<td>24</td>
<td>238</td>
<td>300*4/2.0T</td>
<td>万兆</td>
</tr>
<tr>
<td>Z4</td>
<td>实体机</td>
<td>CFT存储</td>
<td>24</td>
<td>64</td>
<td>300*2/0</td>
<td></td>
</tr>
<tr>
<td>G7</td>
<td>实体机</td>
<td></td>
<td>28</td>
<td>256</td>
<td>0/2288</td>
<td>万兆</td>
</tr>
<tr>
<td>G6</td>
<td>实体机</td>
<td></td>
<td>28</td>
<td>256</td>
<td>600/4800</td>
<td>万兆</td>
</tr>
<tr>
<td>CG1-10G</td>
<td>替代B70,M10</td>
<td>计算类</td>
<td>80</td>
<td>192</td>
<td>0/1440</td>
<td>万兆</td>
</tr>
<tr>
<td>CG2-10G</td>
<td></td>
<td>特征类</td>
<td>40</td>
<td>1384</td>
<td>0/2880</td>
<td>万兆</td>
</tr>
<tr>
<td>SC3-10G</td>
<td>替代TSC20</td>
<td>存储类</td>
<td>8</td>
<td>64</td>
<td>144000/480</td>
<td>万兆</td>
</tr>
<tr>
<td>SH1-10G</td>
<td>替代TS80</td>
<td>存储类</td>
<td>16</td>
<td>64</td>
<td>0/7680</td>
<td>万兆</td>
</tr>
<tr>
<td>SH3-10G</td>
<td>替代Z30</td>
<td>存储类</td>
<td>16</td>
<td>128</td>
<td>3600/3200</td>
<td>万兆</td>
</tr>
<tr>
<td>S3·2*LARGE16.C200</td>
<td>云机型</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>D1</td>
<td>云机型</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>I3</td>
<td>云机型</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>M3</td>
<td>云机型</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Y0-MI52-25G</td>
<td>云机型</td>
<td></td>
<td>8</td>
<td>40</td>
<td>2T</td>
<td></td>
</tr>
</tbody></table>
<p>1 CGI = 1.7 M10<br>1 V8 = 2 V4 = 1 C1</p>
<p>TS80比TS8成本低，替代品<br>TS90和TS9差不多，属于SSD中性能比较低的</p>
<p>A5 -&gt; Z3/Z4<br>A5 -&gt; TS8/TS80</p>
<p>T5：存储大，性能中<br>T6：存储大，性能高</p>
<p>TS5合并到TS6<br>TS8合并到Z3/Z4</p>
<h2 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h2><p>SSD/机械硬盘</p>
<ul>
<li>体积小</li>
<li>读写快（3-16倍）</li>
<li>寿命短（擦出写入）</li>
<li>价格贵</li>
</ul>
]]></content>
      <categories>
        <category>答辩</category>
        <category>机型</category>
      </categories>
      <tags>
        <tag>computer type</tag>
      </tags>
  </entry>
  <entry>
    <title>模调系统</title>
    <url>/2021/11/10/%E6%A8%A1%E8%B0%83%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="1-系统要求"><a href="#1-系统要求" class="headerlink" title="1. 系统要求"></a>1. 系统要求</h2><h4 id="（1）逻辑耦合低"><a href="#（1）逻辑耦合低" class="headerlink" title="（1）逻辑耦合低"></a>（1）逻辑耦合低</h4><ul>
<li>拆分成五个模块</li>
<li>各模块单独配置</li>
</ul>
<h4 id="（2）可维护性强"><a href="#（2）可维护性强" class="headerlink" title="（2）可维护性强"></a>（2）可维护性强</h4><ul>
<li>每个模块调整，不影响其他模块</li>
<li>接入监控，可以看到每个模块的处理状态</li>
</ul>
<h4 id="（3）可扩展性高"><a href="#（3）可扩展性高" class="headerlink" title="（3）可扩展性高"></a>（3）可扩展性高</h4><ul>
<li>数据拉去：支持配置多个kafka集群</li>
<li>数据处理<ul>
<li>通过filter，增加处理流程</li>
<li>不规范裁剪 + 特殊处理 + IP补充 + 其他</li>
</ul>
</li>
<li>数据缓存<ul>
<li>通过规则放到不同的列表中</li>
<li>IP + msgno尾号</li>
</ul>
</li>
<li>数据拉取计算<ul>
<li>可配置不同的算法</li>
<li>找FCGI入口 + 计算调用树</li>
</ul>
</li>
<li>数据写入：支持写入多个集群</li>
</ul>
<h2 id="2-容量"><a href="#2-容量" class="headerlink" title="2. 容量"></a>2. 容量</h2><h4 id="（1）应用服务器"><a href="#（1）应用服务器" class="headerlink" title="（1）应用服务器"></a>（1）应用服务器</h4><table>
<thead>
<tr>
<th></th>
<th>前端</th>
<th>后台</th>
<th>writer</th>
<th>openapi</th>
</tr>
</thead>
<tbody><tr>
<td>每天请求量</td>
<td>400</td>
<td>400</td>
<td></td>
<td>4863</td>
</tr>
<tr>
<td>各接口访问峰值</td>
<td>15/min</td>
<td>15/min</td>
<td></td>
<td>161/min</td>
</tr>
<tr>
<td>平均请求响应</td>
<td>0</td>
<td>0</td>
<td></td>
<td>65ms</td>
</tr>
<tr>
<td>最大请求响应</td>
<td>0</td>
<td>0</td>
<td></td>
<td>61621ms</td>
</tr>
<tr>
<td>网卡I/O流量</td>
<td></td>
<td></td>
<td>入49.5/min，91.5/min；出56.2/min，106.8/min</td>
<td></td>
</tr>
<tr>
<td>磁盘I/O负载</td>
<td></td>
<td></td>
<td>读平均：0，写平均：5611，写峰值：7961</td>
<td></td>
</tr>
<tr>
<td>内存使用情况</td>
<td>平均12.7，峰值14.4</td>
<td></td>
<td>平均54，峰值57.2</td>
<td></td>
</tr>
<tr>
<td>CPU使用情况</td>
<td>平均3，峰值11</td>
<td></td>
<td>平均33，峰值40</td>
<td></td>
</tr>
</tbody></table>
<h4 id="（2）数据库"><a href="#（2）数据库" class="headerlink" title="（2）数据库"></a>（2）数据库</h4><table>
<thead>
<tr>
<th></th>
<th>FMHA</th>
<th>CTSDB</th>
</tr>
</thead>
<tbody><tr>
<td>当前数据容量</td>
<td>50-60G</td>
<td>3T * 7 =21T，470亿</td>
</tr>
<tr>
<td>每天数据增量</td>
<td></td>
<td>1.5T * 2 = 3T，66亿</td>
</tr>
<tr>
<td>读峰值/s</td>
<td>494</td>
<td>11/min，2/s</td>
</tr>
<tr>
<td>写峰值/s</td>
<td>290</td>
<td>10.7w / min</td>
</tr>
</tbody></table>
<h4 id="（3）缓存"><a href="#（3）缓存" class="headerlink" title="（3）缓存"></a>（3）缓存</h4><table>
<thead>
<tr>
<th></th>
<th>CKV+</th>
</tr>
</thead>
<tbody><tr>
<td>缓存内容大小</td>
<td>15-20G</td>
</tr>
<tr>
<td>缓存内容数量</td>
<td></td>
</tr>
<tr>
<td>缓存过期时间</td>
<td>30min/24h</td>
</tr>
<tr>
<td>缓存数据结构</td>
<td>list，set</td>
</tr>
<tr>
<td>读峰值/s</td>
<td>7985253/min，13.3w/s</td>
</tr>
<tr>
<td>写峰值/s</td>
<td>7985253/min，13.3w/s</td>
</tr>
<tr>
<td>连接数限制</td>
<td>2w</td>
</tr>
<tr>
<td>备shard</td>
<td>不可读，1副本</td>
</tr>
</tbody></table>
<h4 id="（4）消息队列"><a href="#（4）消息队列" class="headerlink" title="（4）消息队列"></a>（4）消息队列</h4><table>
<thead>
<tr>
<th></th>
<th>kafka</th>
</tr>
</thead>
<tbody><tr>
<td>每天平均数据增量</td>
<td>80亿</td>
</tr>
<tr>
<td>消息持久的过期时间</td>
<td>3天</td>
</tr>
<tr>
<td>读峰值/s</td>
<td></td>
</tr>
<tr>
<td>写峰值/s</td>
<td></td>
</tr>
<tr>
<td>每条消息大小</td>
<td>0.14k</td>
</tr>
<tr>
<td>平均延迟</td>
<td></td>
</tr>
<tr>
<td>最大延迟</td>
<td></td>
</tr>
</tbody></table>
<h2 id="3-容错"><a href="#3-容错" class="headerlink" title="3. 容错"></a>3. 容错</h2><p>发生故障时，系统还能继续运行</p>
<h2 id="4-可伸缩性"><a href="#4-可伸缩性" class="headerlink" title="4. 可伸缩性"></a>4. 可伸缩性</h2><p>kafka：增加分片，broker进入/退出<br>writer：增加进程，提高模块线程数，限速<br>CTSDB：增加副本，node进入/退出</p>
<h2 id="5-性能"><a href="#5-性能" class="headerlink" title="5. 性能"></a>5. 性能</h2><h4 id="（1）性能测试"><a href="#（1）性能测试" class="headerlink" title="（1）性能测试"></a>（1）性能测试</h4><p>响应时间 + 并发数 + 吞吐量<br>吞吐量 = （ 1000 / 响应时间ms ) * 并发数</p>
<h4 id="（2）影响性能因素"><a href="#（2）影响性能因素" class="headerlink" title="（2）影响性能因素"></a>（2）影响性能因素</h4><h5 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h5><ul>
<li>cpu：48核 =》 线程数</li>
<li>内存：128G</li>
<li>磁盘IO</li>
<li>网络</li>
</ul>
<h5 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h5><ul>
<li>数据库<ul>
<li>内存，CPU计算，磁盘读写</li>
<li>可以改为使用缓存</li>
</ul>
</li>
<li>锁竞争<ul>
<li>上下文切换，性能开销</li>
<li>请求堆积，影响性能</li>
</ul>
</li>
<li>异常：异常抛出需要构建异常栈，捕获和处理，消耗系统性能</li>
</ul>
<h4 id="（3）-优化策略"><a href="#（3）-优化策略" class="headerlink" title="（3） 优化策略"></a>（3） 优化策略</h4><ul>
<li>优化代码：数据结构；设计；算法；空间换时间</li>
<li>参数调优：JVM，线程池，连接池</li>
<li>硬盘：合理设置线程数</li>
<li>软件：缓存，减少锁</li>
<li>兜底：限流，降级，熔断</li>
</ul>
<h4 id="（4）实际"><a href="#（4）实际" class="headerlink" title="（4）实际"></a>（4）实际</h4><h5 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h5><ul>
<li>api升级<ul>
<li>批量拉取，提高并发</li>
<li>心跳线程，防止频繁rebalance</li>
<li>批次，批量大小</li>
<li>offset存在zk，改为，offset存在topic，提高性能</li>
</ul>
</li>
<li>限流：设定限额，根据CTSDB处理能力</li>
<li>熔断：queue写入失败，熔断器</li>
</ul>
<h5 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h5><ul>
<li>线程分配</li>
<li>缓存，减少db压力</li>
</ul>
<h5 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h5><ul>
<li>线程池</li>
<li>连接池</li>
</ul>
<h5 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h5><ul>
<li>连接池</li>
<li>去掉加锁，列表拆分</li>
</ul>
<h5 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h5><ul>
<li>批量写入</li>
<li>一边累计，一边发送，并发度</li>
<li>限流：令牌桶</li>
</ul>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul>
<li>令牌桶，限流</li>
<li>超过，考虑增加熔断器，蓄水池等等</li>
</ul>
]]></content>
      <categories>
        <category>答辩</category>
        <category>模调</category>
      </categories>
      <tags>
        <tag>trace</tag>
      </tags>
  </entry>
  <entry>
    <title>ctsdb</title>
    <url>/2021/11/11/ctsdb/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>答辩</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>ctsdb</tag>
        <tag>big-data</tag>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>数据处理说明</title>
    <url>/2021/11/11/data-delay/</url>
    <content><![CDATA[<p>数据处理延迟：2min<br>理由：</p>
<ul>
<li>1min，数据累计时间（99%）</li>
<li>1min，数据延迟buffer（30s重启）</li>
<li>业务可接受</li>
</ul>
<p>保留10min内的数据，去做数据计算<br>    - 若延迟难以恢复，直接写入CTSDB，不经过ckv+<br>    - 控制数据丢失情况，2-10min<br>    - 考虑到需要重启</p>
]]></content>
      <categories>
        <category>答辩</category>
        <category>模调</category>
      </categories>
      <tags>
        <tag>trace</tag>
        <tag>data</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka</title>
    <url>/2021/11/11/kafka/</url>
    <content><![CDATA[<p>为什么选择kafka<br>和RabbitMQ，RocketMQ，FMQ等等相比</p>
<h3 id="（1）-kafka吞吐高"><a href="#（1）-kafka吞吐高" class="headerlink" title="（1） kafka吞吐高"></a>（1） kafka吞吐高</h3><p>比RabbitMQ高出1-2个数量级</p>
<ul>
<li>kafka QPS：百万级</li>
<li>RabbitMQ QPS：万级</li>
<li>RocketMQ TPS：7万条/S，阿里</li>
</ul>
<h3 id="（2）-数据可靠性"><a href="#（2）-数据可靠性" class="headerlink" title="（2） 数据可靠性"></a>（2） 数据可靠性</h3><p>kafka：多副本，高<br>RabbitMQ：多副本，高<br>RocketMQ：异步实时刷盘/同步刷盘</p>
<h3 id="（3）-服务可用性"><a href="#（3）-服务可用性" class="headerlink" title="（3） 服务可用性"></a>（3） 服务可用性</h3><p>均有</p>
<h3 id="（4）-功能"><a href="#（4）-功能" class="headerlink" title="（4） 功能"></a>（4） 功能</h3><p>kafka：适合海量数据收集，适合高吞吐<br>RabbitMQ：支持更多消息队列功能，适合数据一致性，稳定性，高可靠<br>RocketMQ：阿里，交易场景</p>
<h3 id="（5）-FMQ（2018）"><a href="#（5）-FMQ（2018）" class="headerlink" title="（5） FMQ（2018）"></a>（5） FMQ（2018）</h3><p>适合消息异步订阅，消息队列，一致性，可靠性<br>而不是日志海量存储，高吞吐</p>
<p>zk性能<br>tps：1W+ / s，弱</p>
]]></content>
      <categories>
        <category>答辩</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>big-data</tag>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>模调系统配置</title>
    <url>/2021/11/11/%E6%A8%A1%E8%B0%83%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="1-kafka"><a href="#1-kafka" class="headerlink" title="1. kafka"></a>1. kafka</h2><h3 id="（1）副本数"><a href="#（1）副本数" class="headerlink" title="（1）副本数"></a>（1）副本数</h3><p>3</p>
<h3 id="（2）分片"><a href="#（2）分片" class="headerlink" title="（2）分片"></a>（2）分片</h3><p>16</p>
<h3 id="（3）集群"><a href="#（3）集群" class="headerlink" title="（3）集群"></a>（3）集群</h3><ul>
<li>深圳<ul>
<li>机型：kafka M10，zk M10</li>
<li>机房：kafka JX，zk JX</li>
<li>集群大小：16台</li>
<li>域内域外：域外</li>
</ul>
</li>
<li>上海<ul>
<li>机型：kafka M10，zk M10</li>
<li>机房：kafka QP，zk QP</li>
<li>集群大小：16台</li>
<li>域内域外：域外</li>
</ul>
</li>
<li>深圳通用<ul>
<li>机型：TS60</li>
<li>机房：GM</li>
<li>集群大小：</li>
<li>域内域外：域外</li>
<li>其他：无量</li>
</ul>
</li>
<li>上海通用<ul>
<li>机型：TS60</li>
<li>机房：QP</li>
<li>集群大小：</li>
<li>域内域外：域外</li>
<li>其他：少量测试日志</li>
</ul>
</li>
</ul>
<h3 id="（4）ACK"><a href="#（4）ACK" class="headerlink" title="（4）ACK"></a>（4）ACK</h3><p>1，leader返回ack，不等待其他broker</p>
<h3 id="（5）lag-time"><a href="#（5）lag-time" class="headerlink" title="（5）lag time"></a>（5）lag time</h3><p>10s</p>
<h3 id="（6）同步数据时间"><a href="#（6）同步数据时间" class="headerlink" title="（6）同步数据时间"></a>（6）同步数据时间</h3><p>2s</p>
<h3 id="（7）监控"><a href="#（7）监控" class="headerlink" title="（7）监控"></a>（7）监控</h3><p>kafka manager</p>
<h3 id="（8）M10"><a href="#（8）M10" class="headerlink" title="（8）M10"></a>（8）M10</h3><p>2个12核的CPU<br>128G内存<br>300G磁盘（300*6 = 1800）<br>超线程 2 * 12 * 2 = 48核<br>计算类，实体机<br>网络类型，万兆</p>
<h2 id="2-CTSDB"><a href="#2-CTSDB" class="headerlink" title="2. CTSDB"></a>2. CTSDB</h2><ul>
<li>集群大小：24节点</li>
<li>机型：Y0-MI52-25G</li>
<li>机房：广州四区</li>
<li>机器配置：8核，40GB内存，2T存储</li>
<li>压测性能：96线程 + 60字段 + 并发5000，13W/s</li>
<li>副本：3副本</li>
<li>磁盘使用率：80%</li>
<li>分片分配权重：0.45f，0.55f，1.0</li>
<li>数据一致性：强一致</li>
<li>5000条，10M，10s，并行度1，重试3次，指数型，1s间隔</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>处理</th>
<th>上报</th>
</tr>
</thead>
<tbody><tr>
<td>平均/天</td>
<td>80亿</td>
<td>66亿，1.5T</td>
</tr>
<tr>
<td>平均/h</td>
<td>3.3亿</td>
<td>2.75亿</td>
</tr>
<tr>
<td>平均/min</td>
<td>556万</td>
<td>458万</td>
</tr>
<tr>
<td>平均/s</td>
<td>9.26万</td>
<td>7.64万</td>
</tr>
<tr>
<td>峰值/min</td>
<td>800万</td>
<td>600万</td>
</tr>
<tr>
<td>峰值/s</td>
<td>13.3万</td>
<td>10万</td>
</tr>
</tbody></table>
<p>压测数据</p>
<ul>
<li>60字段</li>
<li>5000条数据一个批次</li>
<li>96并发线程</li>
<li>12.7W/s</li>
<li>0.28K/条数据</li>
</ul>
<h2 id="3-CKV"><a href="#3-CKV" class="headerlink" title="3. CKV+"></a>3. CKV+</h2><ul>
<li>版本：主从版<ul>
<li>主从：所有数据在同一台设备（不包含备份），适合业务数据量少的，命令更多</li>
<li>集群：将数据散列到多台设备，适合业务增长快，体量大的</li>
</ul>
</li>
<li>机房：JX + GM</li>
<li>副本：一主一备，每台机器一个分片</li>
<li>容量：70G</li>
<li>机型：B70 + CG3-10g<ul>
<li>万兆为主：M10，B70，CG1-10g</li>
<li>不推荐使用虚拟机，影响性能</li>
</ul>
</li>
<li>数据同步：异步</li>
<li>机器配置<ul>
<li>2w连接数</li>
<li>单机2048连接数，最大空闲200</li>
</ul>
</li>
</ul>
<h2 id="4-FMHA"><a href="#4-FMHA" class="headerlink" title="4. FMHA"></a>4. FMHA</h2><ul>
<li>集群大小：4台，一主三从</li>
<li>机房：SZ-JX，2台；LJ，1台；GM，1台</li>
<li>卡主修复：关闭</li>
<li>机型：Z4</li>
<li>复制类型：同步/半同步</li>
<li>容灾：强容灾</li>
<li>卡主阈值：24s</li>
<li>域内域外：域内</li>
<li>机器配置<ul>
<li>64GB内存</li>
<li>300 * 2 = 600，300GB磁盘</li>
<li>Z4，用于给财付通存储数据</li>
</ul>
</li>
</ul>
<h2 id="5-nginx"><a href="#5-nginx" class="headerlink" title="5. nginx"></a>5. nginx</h2><ul>
<li>集群大小：5</li>
<li>机房：SZ-GM，1台；SZ-JX，2台；SH-BX，1台；SH-QP，1台</li>
<li>机型：V6-15-100</li>
<li>故障：重试4次，2s剔除，10s恢复</li>
<li>域内域外：域外</li>
<li>机器配置<ul>
<li>一个6核cpu</li>
<li>14.4GB内存</li>
<li>140GB磁盘</li>
<li>网络类型，千兆</li>
<li>虚拟机</li>
</ul>
</li>
</ul>
<h2 id="6-server"><a href="#6-server" class="headerlink" title="6. server"></a>6. server</h2><ul>
<li>集群大小：4</li>
<li>机房：SZ-GM，2台；SZ-JX，2台</li>
<li>机型：B6</li>
<li>故障</li>
<li>域内域外：域内</li>
<li>机器配置<ul>
<li>2个6核cpu</li>
<li>64GB内存</li>
<li>300GB硬盘</li>
<li>适合中间层</li>
<li>网络类型，千兆</li>
<li>超线程，2<em>6</em>2 = 24核</li>
</ul>
</li>
</ul>
<h2 id="7-log-server"><a href="#7-log-server" class="headerlink" title="7. log server"></a>7. log server</h2><ul>
<li>集群配置：6</li>
<li>机房：SZ-GM，3台；SZ-JX，3台</li>
<li>机型：B70</li>
<li>域内域外：域外</li>
<li>机器配置<ul>
<li>2个12核CPU</li>
<li>128G内存</li>
<li>300G磁盘</li>
<li>超线程，2<em>12</em>2 = 48核</li>
<li>网络，万兆</li>
</ul>
</li>
<li>CTSDB<ul>
<li>90线程/6台 = 15线程/台</li>
<li>Queue大小</li>
</ul>
</li>
<li>Processor篇日志<ul>
<li>高峰10W/s，25条/msgno =》 4000msgno/s</li>
<li>时耗：拉取2-5ms + 处理10ms =》 15ms</li>
<li>一个线程每秒处理多少个msgno：1000/15 = 67个</li>
<li>4000/67 = 60个线程，60/6=10 线程/台</li>
</ul>
</li>
<li>Cacher配置<ul>
<li>70G大小，控制在30G左右，1.12亿数据量</li>
<li>高峰期10-12W/s，每条写入时间1-2ms，每秒写入500-1000条数据</li>
<li>12W/500=240线程，10W/1000=100线程</li>
<li>6台服务器，240/6=40线程，100/6=17线程</li>
<li>50核心线程，50最大，50队列</li>
</ul>
</li>
<li>kafka<ul>
<li>拉取<ul>
<li>自动提交：关闭，同步手动提交</li>
<li>最大获取大小：0.5M =》 2M</li>
<li>拉取批量大小：5000</li>
<li>session超时：10000ms</li>
<li>心跳上报间隔：1000ms = 1s</li>
<li>offset获取：earliest</li>
<li>写入Queue间隔：5000ms = 5s</li>
<li>拉取数据线程数：2（运营平台） / 5（计算）</li>
<li>载入配额：60000</li>
<li>失败重试，加载延迟：1000ms</li>
</ul>
</li>
<li>处理<ul>
<li>处理线程数：32（运营） =》 30</li>
<li>写入Queue间隔：60000ms = 60s</li>
<li>批次大小：3000 =》 5000</li>
<li>Queue长度：32 =》 30</li>
</ul>
</li>
<li>写入<ul>
<li>限速开关：打开</li>
<li>写入es集群间隔：60000ms = 60s</li>
<li>写入es批次：3000 =》 5000</li>
<li>写入线程数：8 =》 15</li>
<li>限速：20000/s =》 5000/s</li>
<li>重试次数：3次 =》 丢失</li>
<li>Queue长度：32 =》 30</li>
</ul>
</li>
<li>限速处理（蓄水池，熔断）<ul>
<li>熔断，失败率：80%</li>
<li>打开 -》 半打开，等待时间：300s</li>
<li>关闭状态下RF大小：500</li>
<li>半打开状态小RF大小：20</li>
<li>写入失败，sleep，重试，大于5次，丢失</li>
</ul>
</li>
</ul>
</li>
<li>BlockingQueue<ul>
<li>12.7W/s，字段多，考虑减少</li>
<li>副本，强一致</li>
<li>5000/线程</li>
<li>使用RateLimiter</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>答辩</category>
        <category>模调</category>
      </categories>
      <tags>
        <tag>trace</tag>
        <tag>config</tag>
      </tags>
  </entry>
</search>
