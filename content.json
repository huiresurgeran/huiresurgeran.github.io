{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-02-25T13:22:27.000Z","updated":"2021-02-25T13:22:27.868Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"links","date":"2021-02-25T13:22:45.000Z","updated":"2021-02-25T13:22:45.356Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-02-25T13:22:36.000Z","updated":"2021-02-25T13:22:36.268Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-02-25T13:22:41.000Z","updated":"2021-02-25T13:22:41.351Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"changelog","date":"2021-02-25T13:28:40.000Z","updated":"2021-02-25T13:28:40.896Z","comments":true,"path":"changelog/index.html","permalink":"http://example.com/changelog/index.html","excerpt":"","text":""}],"posts":[{"title":"模调系统配置","slug":"模调系统设计","date":"2021-11-11T14:29:11.000Z","updated":"2021-11-11T15:05:44.786Z","comments":true,"path":"2021/11/11/模调系统设计/","link":"","permalink":"http://example.com/2021/11/11/%E6%A8%A1%E8%B0%83%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/","excerpt":"","text":"1. kafka（1）副本数3 （2）分片16 （3）集群 深圳 机型：kafka M10，zk M10 机房：kafka JX，zk JX 集群大小：16台 域内域外：域外 上海 机型：kafka M10，zk M10 机房：kafka QP，zk QP 集群大小：16台 域内域外：域外 深圳通用 机型：TS60 机房：GM 集群大小： 域内域外：域外 其他：无量 上海通用 机型：TS60 机房：QP 集群大小： 域内域外：域外 其他：少量测试日志 （4）ACK1，leader返回ack，不等待其他broker （5）lag time10s （6）同步数据时间2s （7）监控kafka manager （8）M102个12核的CPU128G内存300G磁盘（300*6 = 1800）超线程 2 * 12 * 2 = 48核计算类，实体机网络类型，万兆 2. CTSDB 集群大小：24节点 机型：Y0-MI52-25G 机房：广州四区 机器配置：8核，40GB内存，2T存储 压测性能：96线程 + 60字段 + 并发5000，13W/s 副本：3副本 磁盘使用率：80% 分片分配权重：0.45f，0.55f，1.0 数据一致性：强一致 5000条，10M，10s，并行度1，重试3次，指数型，1s间隔 处理 上报 平均/天 80亿 66亿，1.5T 平均/h 3.3亿 2.75亿 平均/min 556万 458万 平均/s 9.26万 7.64万 峰值/min 800万 600万 峰值/s 13.3万 10万 压测数据 60字段 5000条数据一个批次 96并发线程 12.7W/s 0.28K/条数据 3. CKV+ 版本：主从版 主从：所有数据在同一台设备（不包含备份），适合业务数据量少的，命令更多 集群：将数据散列到多台设备，适合业务增长快，体量大的 机房：JX + GM 副本：一主一备，每台机器一个分片 容量：70G 机型：B70 + CG3-10g 万兆为主：M10，B70，CG1-10g 不推荐使用虚拟机，影响性能 数据同步：异步 机器配置 2w连接数 单机2048连接数，最大空闲200 4. FMHA 集群大小：4台，一主三从 机房：SZ-JX，2台；LJ，1台；GM，1台 卡主修复：关闭 机型：Z4 复制类型：同步/半同步 容灾：强容灾 卡主阈值：24s 域内域外：域内 机器配置 64GB内存 300 * 2 = 600，300GB磁盘 Z4，用于给财付通存储数据 5. nginx 集群大小：5 机房：SZ-GM，1台；SZ-JX，2台；SH-BX，1台；SH-QP，1台 机型：V6-15-100 故障：重试4次，2s剔除，10s恢复 域内域外：域外 机器配置 一个6核cpu 14.4GB内存 140GB磁盘 网络类型，千兆 虚拟机 6. server 集群大小：4 机房：SZ-GM，2台；SZ-JX，2台 机型：B6 故障 域内域外：域内 机器配置 2个6核cpu 64GB内存 300GB硬盘 适合中间层 网络类型，千兆 超线程，262 = 24核 7. log server 集群配置：6 机房：SZ-GM，3台；SZ-JX，3台 机型：B70 域内域外：域外 机器配置 2个12核CPU 128G内存 300G磁盘 超线程，2122 = 48核 网络，万兆 CTSDB 90线程/6台 = 15线程/台 Queue大小 Processor篇日志 高峰10W/s，25条/msgno =》 4000msgno/s 时耗：拉取2-5ms + 处理10ms =》 15ms 一个线程每秒处理多少个msgno：1000/15 = 67个 4000/67 = 60个线程，60/6=10 线程/台 Cacher配置 70G大小，控制在30G左右，1.12亿数据量 高峰期10-12W/s，每条写入时间1-2ms，每秒写入500-1000条数据 12W/500=240线程，10W/1000=100线程 6台服务器，240/6=40线程，100/6=17线程 50核心线程，50最大，50队列 kafka 拉取 自动提交：关闭，同步手动提交 最大获取大小：0.5M =》 2M 拉取批量大小：5000 session超时：10000ms 心跳上报间隔：1000ms = 1s offset获取：earliest 写入Queue间隔：5000ms = 5s 拉取数据线程数：2（运营平台） / 5（计算） 载入配额：60000 失败重试，加载延迟：1000ms 处理 处理线程数：32（运营） =》 30 写入Queue间隔：60000ms = 60s 批次大小：3000 =》 5000 Queue长度：32 =》 30 写入 限速开关：打开 写入es集群间隔：60000ms = 60s 写入es批次：3000 =》 5000 写入线程数：8 =》 15 限速：20000/s =》 5000/s 重试次数：3次 =》 丢失 Queue长度：32 =》 30 限速处理（蓄水池，熔断） 熔断，失败率：80% 打开 -》 半打开，等待时间：300s 关闭状态下RF大小：500 半打开状态小RF大小：20 写入失败，sleep，重试，大于5次，丢失 BlockingQueue 12.7W/s，字段多，考虑减少 副本，强一致 5000/线程 使用RateLimiter","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"模调","slug":"答辩/模调","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E6%A8%A1%E8%B0%83/"}],"tags":[{"name":"trace","slug":"trace","permalink":"http://example.com/tags/trace/"},{"name":"config","slug":"config","permalink":"http://example.com/tags/config/"}]},{"title":"数据处理说明","slug":"data-delay","date":"2021-11-11T14:26:01.000Z","updated":"2021-11-11T15:04:03.296Z","comments":true,"path":"2021/11/11/data-delay/","link":"","permalink":"http://example.com/2021/11/11/data-delay/","excerpt":"","text":"数据处理延迟：2min理由： 1min，数据累计时间（99%） 1min，数据延迟buffer（30s重启） 业务可接受 保留10min内的数据，去做数据计算 - 若延迟难以恢复，直接写入CTSDB，不经过ckv+ - 控制数据丢失情况，2-10min - 考虑到需要重启","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"模调","slug":"答辩/模调","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E6%A8%A1%E8%B0%83/"}],"tags":[{"name":"trace","slug":"trace","permalink":"http://example.com/tags/trace/"},{"name":"data","slug":"data","permalink":"http://example.com/tags/data/"}]},{"title":"ctsdb","slug":"ctsdb","date":"2021-11-11T14:20:37.000Z","updated":"2021-11-11T15:03:26.102Z","comments":true,"path":"2021/11/11/ctsdb/","link":"","permalink":"http://example.com/2021/11/11/ctsdb/","excerpt":"","text":"","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"大数据","slug":"答辩/大数据","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"ctsdb","slug":"ctsdb","permalink":"http://example.com/tags/ctsdb/"},{"name":"big-data","slug":"big-data","permalink":"http://example.com/tags/big-data/"},{"name":"es","slug":"es","permalink":"http://example.com/tags/es/"}]},{"title":"kafka","slug":"kafka","date":"2021-11-11T14:20:33.000Z","updated":"2021-11-11T15:04:38.111Z","comments":true,"path":"2021/11/11/kafka/","link":"","permalink":"http://example.com/2021/11/11/kafka/","excerpt":"","text":"为什么选择kafka和RabbitMQ，RocketMQ，FMQ等等相比 （1） kafka吞吐高比RabbitMQ高出1-2个数量级 kafka QPS：百万级 RabbitMQ QPS：万级 RocketMQ TPS：7万条/S，阿里 （2） 数据可靠性kafka：多副本，高RabbitMQ：多副本，高RocketMQ：异步实时刷盘/同步刷盘 （3） 服务可用性均有 （4） 功能kafka：适合海量数据收集，适合高吞吐RabbitMQ：支持更多消息队列功能，适合数据一致性，稳定性，高可靠RocketMQ：阿里，交易场景 （5） FMQ（2018）适合消息异步订阅，消息队列，一致性，可靠性而不是日志海量存储，高吞吐 zk性能tps：1W+ / s，弱","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"大数据","slug":"答辩/大数据","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"big-data","slug":"big-data","permalink":"http://example.com/tags/big-data/"},{"name":"kafka","slug":"kafka","permalink":"http://example.com/tags/kafka/"}]},{"title":"应用设计模式","slug":"应用设计模式","date":"2021-11-10T14:23:24.000Z","updated":"2021-11-10T14:57:22.712Z","comments":true,"path":"2021/11/10/应用设计模式/","link":"","permalink":"http://example.com/2021/11/10/%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"1. 创建型：解决对象的创建问题（1）单例模式创建全局唯一的对象实现方式：饿汉式，懒汉式，双重检测，静态内部类，枚举 （2）工厂模式简单工厂，工厂方法，抽象工厂用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定参数决定创建哪种类型的对象 （3）建造者模式用来创建复杂对象，可以通过设置不同的可选参数，“定制化”地创建不同的参数。将一个复杂对象的构建与他的表示分离，使得同样的创建过程，可以创建不同的表示建立胖小人，瘦小人 （4）原型模式对象创建成本比较大，同一个类的不同对象之间的差别不大，可以利用已有对象（原型）进行复制/拷贝的方式，来创建新对象，包括了深拷贝和浅拷贝。 2. 结构设计模式：总结了类或者对象组合在一起的经典结构（1）代理模式在不改变原始类接口的条件下，为原始类定义一个代理类，目的是控制访问，而非加强功能。一般用于非功能性需求：日志，监控，统计等等 （2）桥接模式将抽象和实现解耦，能独立开发组合优先于继承 （3）装饰器模式解决继承关系过于复杂的问题通过组合，代替继承，给原始类添加增强功能 （4）适配器模式提供跟原始类不同的接口将不兼容的接口转换为可兼容的接口类适配器（继承） + 对象适配器（组合） （5）门面模式封装细粒度的接口，提供组合各个细粒度接口的高层次接口，来提高接口的易用性 （6）组合模式主要用来处理树形结构数据 （7）享元模式被共享的单元。复用对象，节省内存，享元对象是不可变对象。 3. 行为型设计模式：类或对象之间的交互（1）观察者类型（2）模板模式（3）策略模式（4）职责链模式多个处理器依次处理同一个请求实现过滤器，拦截器 （5）迭代器模式游标模式，用来遍历集合对象 （6）状态模式用来实现状态机 （7）访问者模式（8）备忘录模式快照模式用来防丢失，撤销，恢复 （9）命令模式（10）解释器模式（11）中介模式","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"原理","slug":"答辩/原理","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"design pattern","slug":"design-pattern","permalink":"http://example.com/tags/design-pattern/"}]},{"title":"SSL+TLS+HTTPS","slug":"SSL-TLS-HTTPS","date":"2021-11-10T14:21:01.000Z","updated":"2021-11-10T14:56:17.534Z","comments":true,"path":"2021/11/10/SSL-TLS-HTTPS/","link":"","permalink":"http://example.com/2021/11/10/SSL-TLS-HTTPS/","excerpt":"","text":"1. HTTPSHTTP + 加密 + 认证 + 完整性保护 = HTTPS HTTP，四层，从上到下为：应用层，HTTP，，TCP，IPHTTPS，五层，从上到下为：应用层，HTTP，SSL，TCP，IP 2. SSL/TLSHTTP和TCP之间的中转协议，应用层协议 3. TLSTLS是SSL的升级版","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"网络","slug":"答辩/网络","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"ssl","slug":"ssl","permalink":"http://example.com/tags/ssl/"},{"name":"ttl","slug":"ttl","permalink":"http://example.com/tags/ttl/"},{"name":"https","slug":"https","permalink":"http://example.com/tags/https/"}]},{"title":"机型分析","slug":"机型分析","date":"2021-11-10T13:53:52.000Z","updated":"2021-11-11T14:13:46.040Z","comments":true,"path":"2021/11/10/机型分析/","link":"","permalink":"http://example.com/2021/11/10/%E6%9C%BA%E5%9E%8B%E5%88%86%E6%9E%90/","excerpt":"","text":"1. 计算型B70，M10：CPU高，内存高 2. 存储Z4（Z3，TS）：磁盘高，SSD高 3. 云机器4. 中间层B6：内存还行 5. 虚拟机6. 机型命名 V6.0CG1L - 10G （1）第一段：英文，机型特征 计算类：C（Computing），合并B和M（V5.0，内存和CPU好） 存储类：S（Storage） 大数据类：B（Bigdata） 异构类：F（FPGA），G（GPU） 专用类：D（Dedicated，替代Z） 网络类：N（Networking server） 项目类：P（Project），代替原Other机型 （2）第二段：业务属性 C类分G：通用，General S类分热、湿、冷： SH，热数据，使用SSD硬盘，TS8X（V5.0） SW，温数据，TS60，TSH（混合SSD和Sate） SC，冷数据，使用4T和8T更大硬盘 G类分Traning，Inference和Rendering （3）第三段：数字顺排，体现统一业务属性的不同细分场景体现CPU，硬盘，内存 （4）第四段：字母非必选，机型小属性，比如液冷用L （5）第五段：网卡速率7. 所有机型对比 名称 类型 用途 CPU 内存 磁盘/SSD 网络类型 V4-8-100 虚拟机 4 8 100/0 千兆 V6-15-100 虚拟机 6 15 100/0 千兆 V8-16-200 虚拟机 8 16 200/0 千兆 V16-24-300 虚拟机 16 64 300/0 万兆 V23-128-800 虚拟机 24 128 800/0 万兆 A5（停） 实体机 后台数据库 4 32 300*6/0 千兆 B6 实体机 中间层 262 64 300/0 千兆 B70 实体机 计算 2122 128 300*6/0 万兆 C1 实体机 前端接入层 142 16 1024 千兆 M1 实体机 虚拟化，大内存 262 128 900/0 千兆 M2 实体机 虚拟化 262 64 900/0 千兆 M10 实体机 计算 2122 128 300*6/0 万兆 TS6 架构部TFS 大存储 162 32 2T*12/240 千兆 TS60 实体机 大存储 24 64 2T*12/80 万兆 TS8 架构部TSSD/微信 数据库存储 262 32 0/300*12 千兆 TS80 架构部TSSD/微信 数据库存储 24 64 1.8T*4/80 万兆 TS90 云平台部 存储 24 256 0/800*12 万兆 TSC1 实体机 12 32 24576/0 千兆 TSC10 实体机 12 32 24576/240 万兆 TS5 实体机 存储 2*6 64 2T*12 hadoop使用 TS9 云平台部 SSD高性能 2*6 128 0/3100（480*8） Z3 实体机 互娱存储 24 64 300*2/1228 千兆 Z30 实体机 24 238 300*4/2.0T 万兆 Z4 实体机 CFT存储 24 64 300*2/0 G7 实体机 28 256 0/2288 万兆 G6 实体机 28 256 600/4800 万兆 CG1-10G 替代B70,M10 计算类 80 192 0/1440 万兆 CG2-10G 特征类 40 1384 0/2880 万兆 SC3-10G 替代TSC20 存储类 8 64 144000/480 万兆 SH1-10G 替代TS80 存储类 16 64 0/7680 万兆 SH3-10G 替代Z30 存储类 16 128 3600/3200 万兆 S3·2*LARGE16.C200 云机型 D1 云机型 I3 云机型 M3 云机型 Y0-MI52-25G 云机型 8 40 2T 1 CGI = 1.7 M101 V8 = 2 V4 = 1 C1 TS80比TS8成本低，替代品TS90和TS9差不多，属于SSD中性能比较低的 A5 -&gt; Z3/Z4A5 -&gt; TS8/TS80 T5：存储大，性能中T6：存储大，性能高 TS5合并到TS6TS8合并到Z3/Z4 8. 其他SSD/机械硬盘 体积小 读写快（3-16倍） 寿命短（擦出写入） 价格贵","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"机型","slug":"答辩/机型","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E6%9C%BA%E5%9E%8B/"}],"tags":[{"name":"computer type","slug":"computer-type","permalink":"http://example.com/tags/computer-type/"}]},{"title":"容灾和数据一致性","slug":"容灾","date":"2021-11-10T13:53:45.000Z","updated":"2021-11-11T15:05:21.675Z","comments":true,"path":"2021/11/10/容灾/","link":"","permalink":"http://example.com/2021/11/10/%E5%AE%B9%E7%81%BE/","excerpt":"","text":"1. 成果（1）服务部署层面服务的多活部署，拥有容灾能力 （2）低成本容灾ng/svr多园区部署L5剔除单机故障演戏 （3）高成本的未做CTSDB/CKV+，外部门，演戏成本高 （4）无上海机房中心设备分布决定满足了深圳多园区的容灾要求 （5）FMHA只存储配置相关的数据，要求不高 （6）CTSDB/CKV+多园区容灾部署成本考虑 2. 域名解析DNS解析服务：机器故障，5min剔除，慢 3. TGW（1）自己一个集群4台TGW，每台TGW与其他三台TGW实时同步会话信息 （2）下游服务周期性探测server的状态，1min从客服务列表中剔除故障server检测服务恢复正常，自动加回可服务列表 4. 智能网关多集群部署 （1）容灾自己多园区部署深圳主集群，天津灾备 下游服务 心跳检测机制 同一个进程，三次发送到同一个IP的请求均连接失败，就踢掉该IP，请求不会发送到故障服务器 智能路由转发 （2）其他功能 TOF统一身份认证 鉴权，员工身份信息 共享登录态 智能路由转发 5. nginx两地四中心 + 智能网关心跳检测 （1）上游智能网关 （2）自己多园区部署，多城市部署 （3）下游 异常重试：4次，服务器列表根据权重轮询 停止重试：请求时间60S/重试次数4次 踢掉策略：超时2s，认为失败，踢掉 恢复策略：屏蔽10s，重新加入存活服务器列表 6. 权限系统降级登录（探测OA，302次数超过阈值）智能网关开启免登陆 7. 北极星8. L5（1）容灾自己agent挂了，从文件中读取路由信息 下游 故障剔除：连续上报10次失败 / 1min失败&gt;50% 故障恢复：每10s对网络层探测，ok则逐步放量请求 （2）其他功能 负载均衡：空闲状态 过载保护：回包状态 =》 一个周期内不给服务提供者分配请求 路由策略：配置 + 权重 + 轮询 全部服务过载，降级，一个周期内不再返回可用路由 9. CL5（1）容灾故障剔除一个周期内，错误率大于某个阈值，或者连续错误多少次，节点故障 故障恢复ping探测宕机节点连通，放少量流量，后逐渐恢复正常 （2）其他功能 负载均衡：静态权重（配置） + 动态权重（成功率，耗时） 过载保护：降级 10. openapi/oms网关oms网关：多集群部署 + L5切换openapi：两地四中心 + oms网关全量信息 （1）网关 网关集群：L5切换 网关子服务： 每套网关多台服务器 每个网关机器都有全量子服务信息 （2）服务端 服务注册 保存服务信息到本地 同步协议，同步服务信息到其他网关机器 子服务从网关同步到其他子服务 心跳检测 网关定时检测子服务心跳，剔除无心跳服务 子服务定期发送心跳 客户端缓存 11. 日志写入服务两地两中心 + 消费者组机制 异常重试：CTSDB容灾：消费者组，rebalance 12. 日志查询服务两地四中心 + nginx配置（故障剔除） 异常重试：nginx，4次容灾： 故障剔除：2s，1次 故障恢复：10s 13. CTSDB支持多地域部署 + 多副本 + 选举 （1）容灾 集群：多园区容灾 城市：不同地域相互隔离，多园区 机房：多可用区部署 单台机器： master：选举，投票（id排序，Bully算法） primary：副本 + 选举 动态更新 =》 IS列表 =》 master将服务提升为primary（最新的UUID） master复制一个副本，分配在节点 replica：同上 （2）数据一致性 主副本分片：强一致 写入，主副本都失败，重试 写入，主成功，备失败 强一致：失败，重试 非强一致： 副本故障，移除in-sync 不对外提供查询，后续异步恢复 master分配新的副本 IS存在集群元信息中，master维护 写入副本失败，从IS中剔除，动态更新IS列表 写入，主备都成功，成功 （3）返回成功，数据没有flush到磁盘translog（日志文件） + commit point （4） 全部失败备份，快照 14. FMHA一地三中心 + 半同步 + 主备切换 + CTSDB （1）容灾 跨城：名字服务DNS + agent上报心跳 跨IDC：权重 + 名字服务DNS + agent上报心跳 跨机： 主从切换，权重 + gtid（Global Transaction Identifier，一个事务对应一个GTID，全局唯一） 数据同步 + 切换 半同步复制 （2）数据一致性三园区 + 半同步 + GTID + read_only （3）卡主关闭：主备切换 15. TDW多园区容灾 + 自动恢复 + 任务迁移 16. CKV+支持多集群部署 + L5切换 + 分片副本 + 主备切换 （1）容灾副本 + 选举（默认一主一备）副本：默认跨机架，也可跨城 客户端L5，自动剔除 集群，跨IDC部署 城市，跨城部署 多机器故障：主备分片同时异常，无法切换 设备可恢复：本地快照 + 流水 设备不可恢复：冷备文件回档（每天至少一次冷备，保存三天） 单机器故障 故障检测：master发送心跳，2s间隔，10次四百 设备异常，不可恢复，分片，30s内完成 主分片，主备切换 备份片，重建 设备异常，可恢复 秒级恢复，共享内存 分片状态正常，无操作 分片状态修改中，异常 主分片：剔除主，主备切换 备份片：剔除备，新建备 （2）数据一致性异步（默认），强一致（Raft协议，性能损耗大） 写入 主备成功：一致 主挂了：剔除主，主备切换（数据未同步，丢失） 备挂了：剔除备，换备 主备失败：重试 复制中主挂了 可恢复：秒级恢复 不可恢复： 数据丢失 （3） 选举 master 3个节点，不同机房 创建key，成功则为master 节点异常，TTL到期，其他Follower抢占 17. kafka多集群部署（两地两中心） + 多副本 + 选举 （1）容灾副本 + 选举 controller：zk，创建节点 leader：controller提升副本 + ISR列表（leader维护，zk中也有） + 第一个 follower：再分配follower （2）数据一致性 leader失败：重试 leader成功，fowller失败：异步 + 重试 + ISR 18. 集群/set化作用 流量拆分 故障隔离 异地容灾","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"容灾","slug":"答辩/容灾","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%AE%B9%E7%81%BE/"}],"tags":[{"name":"disaster tolerance","slug":"disaster-tolerance","permalink":"http://example.com/tags/disaster-tolerance/"}]},{"title":"分布式事务一致性解决方案","slug":"分布式事务一致性解决方案","date":"2021-11-10T13:46:53.000Z","updated":"2021-11-10T14:56:57.704Z","comments":true,"path":"2021/11/10/分布式事务一致性解决方案/","link":"","permalink":"http://example.com/2021/11/10/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"","text":"1. 数据一致性主库、从库、缓存数据一致性多副本数据一致性分布式服务的数据一致性 2. 概念强一致性弱一致性最终一致性 3. 原理 事务的ACID特性 原子性（Atomicity） 一致性（Consistency） 隔离性（Isolation） 持久性（Durability） CAP定理，无法同时满足 Consistency，一致性 Availability，可用性 Partition tolerance，分区容错性 BASE理论：BASE 理论是针对 NoSQL 数据库而言的，它是对 CAP 理论中一致性（C）和可用性（A）进行权衡的结果 基本可用（Basically Available） 软状态（Soft-state） 最终一致性（Eventually Consistent） 4. 协议 两阶段提交 三阶段提交 TCC Paxos ZAB：zk使用 Raft：先选出主节点 Quorum Gossip 5. 强一致性方案（1）2PC，二阶段提交协议 阶段一：Prepare，准备，投票 阶段二：Commit/Cancel，提交，回滚缺点：阻塞范围广，不适合高并发场景 （2）DTP/XA规范 AP：应用程序 RMS：资源管理器，参与者 TM：事务管理器，协调者 XA：组件之间香菇操作的接口 6. 最终一致性方案（1）TCC T：try，锁定资源 C：Confirm，确认，补偿 C：Cancel阻塞时间范围短，性能比2PC有提升 （2）本地事务状态表调用方调用分布式事务之前，将待执行的事务流程和状态信息，存储到数据库中，之后每次调用成功，更新对应的事务状态，失败则终止 （3）消息中间件 消息中间件，不支持事务 消息中间件，支持事务：定时任务的工作交给消息中间件来提供 7. 弱一致性方案（1）基于状态的补偿事后处理机制 （2）重试（+回滚） + 告警 + 人工修复放弃一致性成本最低，最被动 （3）事后处理对账 7. 结论数据一致性要求高：金融银行，2PC，强一致性方案可用性 + 一致性：互联网应用，Base理论，最终一致性极端场景：业务特性，弱一致性","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"分布式事务","slug":"答辩/分布式事务","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"}],"tags":[{"name":"distributed computing","slug":"distributed-computing","permalink":"http://example.com/tags/distributed-computing/"}]},{"title":"模调系统","slug":"模调系统","date":"2021-11-10T05:08:51.000Z","updated":"2021-11-10T14:58:08.531Z","comments":true,"path":"2021/11/10/模调系统/","link":"","permalink":"http://example.com/2021/11/10/%E6%A8%A1%E8%B0%83%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"1. 系统要求（1）逻辑耦合低 拆分成五个模块 各模块单独配置 （2）可维护性强 每个模块调整，不影响其他模块 接入监控，可以看到每个模块的处理状态 （3）可扩展性高 数据拉去：支持配置多个kafka集群 数据处理 通过filter，增加处理流程 不规范裁剪 + 特殊处理 + IP补充 + 其他 数据缓存 通过规则放到不同的列表中 IP + msgno尾号 数据拉取计算 可配置不同的算法 找FCGI入口 + 计算调用树 数据写入：支持写入多个集群 2. 容量（1）应用服务器 前端 后台 writer openapi 每天请求量 400 400 4863 各接口访问峰值 15/min 15/min 161/min 平均请求响应 0 0 65ms 最大请求响应 0 0 61621ms 网卡I/O流量 入49.5/min，91.5/min；出56.2/min，106.8/min 磁盘I/O负载 读平均：0，写平均：5611，写峰值：7961 内存使用情况 平均12.7，峰值14.4 平均54，峰值57.2 CPU使用情况 平均3，峰值11 平均33，峰值40 （2）数据库 FMHA CTSDB 当前数据容量 50-60G 3T * 7 =21T，470亿 每天数据增量 1.5T * 2 = 3T，66亿 读峰值/s 494 11/min，2/s 写峰值/s 290 10.7w / min （3）缓存 CKV+ 缓存内容大小 15-20G 缓存内容数量 缓存过期时间 30min/24h 缓存数据结构 list，set 读峰值/s 7985253/min，13.3w/s 写峰值/s 7985253/min，13.3w/s 连接数限制 2w 备shard 不可读，1副本 （4）消息队列 kafka 每天平均数据增量 80亿 消息持久的过期时间 3天 读峰值/s 写峰值/s 每条消息大小 0.14k 平均延迟 最大延迟 3. 容错发生故障时，系统还能继续运行 4. 可伸缩性kafka：增加分片，broker进入/退出writer：增加进程，提高模块线程数，限速CTSDB：增加副本，node进入/退出 5. 性能（1）性能测试响应时间 + 并发数 + 吞吐量吞吐量 = （ 1000 / 响应时间ms ) * 并发数 （2）影响性能因素硬盘 cpu：48核 =》 线程数 内存：128G 磁盘IO 网络 软件 数据库 内存，CPU计算，磁盘读写 可以改为使用缓存 锁竞争 上下文切换，性能开销 请求堆积，影响性能 异常：异常抛出需要构建异常栈，捕获和处理，消耗系统性能 （3） 优化策略 优化代码：数据结构；设计；算法；空间换时间 参数调优：JVM，线程池，连接池 硬盘：合理设置线程数 软件：缓存，减少锁 兜底：限流，降级，熔断 （4）实际拉取 api升级 批量拉取，提高并发 心跳线程，防止频繁rebalance 批次，批量大小 offset存在zk，改为，offset存在topic，提高性能 限流：设定限额，根据CTSDB处理能力 熔断：queue写入失败，熔断器 处理 线程分配 缓存，减少db压力 缓存 线程池 连接池 计算 连接池 去掉加锁，列表拆分 写入 批量写入 一边累计，一边发送，并发度 限流：令牌桶 其他 令牌桶，限流 超过，考虑增加熔断器，蓄水池等等","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"模调","slug":"答辩/模调","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E6%A8%A1%E8%B0%83/"}],"tags":[{"name":"trace","slug":"trace","permalink":"http://example.com/tags/trace/"}]},{"title":"oop原则 & cap原理","slug":"oop","date":"2021-11-10T05:01:44.000Z","updated":"2021-11-10T14:55:50.848Z","comments":true,"path":"2021/11/10/oop/","link":"","permalink":"http://example.com/2021/11/10/oop/","excerpt":"","text":"oop：Object Oriented Programming 面向对象编程1. 单一职责功能专一，易于复用和重构 2. 开闭原则在类的设计理念，哪些行为是允许的，哪些行为是不允许的达到类可维护，可扩展，可复用的目的 3. 里式替换在类的设计中，子类型必须能够替换父类型 4. 依赖倒置在类的设计上，应当面向接口编程，而不是面向实现高层模块不应该依赖底层模块，两者应该依赖其抽象抽象不应该依赖细节，细节应该依赖抽象 5. 接口隔离在接口设计中，应当杜绝不必要的接口 6. 迪米特法则在类的设计中，调用类不需要知道被调用类的内部实现或者具体的实例对象 CAP原理分布式系统中 Consistency一致性 Availability可用性， Partition tolerance容错性","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"原理","slug":"答辩/原理","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"oop","slug":"oop","permalink":"http://example.com/tags/oop/"},{"name":"cap","slug":"cap","permalink":"http://example.com/tags/cap/"}]},{"title":"other-trace-systems","slug":"other-trace-systems","date":"2021-11-09T13:24:32.000Z","updated":"2021-11-09T13:46:57.521Z","comments":true,"path":"2021/11/09/other-trace-systems/","link":"","permalink":"http://example.com/2021/11/09/other-trace-systems/","excerpt":"","text":"1. 业界其他（1）zipkin公司：Twitter 缺点： 基于java开发，不支持C++ http上报，消耗性能 拦截请求，入侵强 支持trace，不支持监控告警 （2）鹰眼公司：阿里特单：存储在HBASE缺点：不开源 （3）Pinpoint公司：韩国 优点： 字节码注入，无侵入 存储使用hbase 缺点： 仅支持java服务，不支持C++ 不支持查询单个调用链 不兼容OpenTracing 不支持trace （4）CAT公司：美团 优点：基于JAVA开发，支持多种语言 缺点： 埋点，代码入侵强 文档少，资料混乱 停止维护 （5）Dapper公司：谷歌缺点：不开源 （6）Opencensus公司：谷歌 优点：开源 缺点： 无架构梳理 不支持日志 基于agent/controller，依赖重，耦合度高，灵活度低 （7）skywalking公司：华为 优点： JAVA字节码注入，无侵入 兼容OpenTracing 缺点： 依赖多 不支持C++ （8）Jaeger公司：Uber 优点： 支持多种语言，golang开发 兼容OpenTracing 缺点： 拦截请求，入侵强 支持trace，不支持监控告警 （9）clickhouse介绍：面向列的数据库管理系统，用于在线分析查询 优点 开源 查询速度快 容错性高 可靠性强 扩展性高 易用性高 支持SQL，在线查询，近似计算 缺点 不支持事务 修改/删除支持差 2. 公司内部（1） 天机阁1.0 zipkin协议 + 鹰眼架构 需要SDK和agent，外部依赖重 只有trace，无log和metric 数据延迟60s 不支持私有化 不支持多租户 （2） 天机阁2.0 2020年底上线 IP相关需要自行扩展 数据不标准，需要特殊处理 安全性/主题区分需要考虑","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"模调","slug":"答辩/模调","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E6%A8%A1%E8%B0%83/"}],"tags":[{"name":"trace","slug":"trace","permalink":"http://example.com/tags/trace/"},{"name":"system","slug":"system","permalink":"http://example.com/tags/system/"}]},{"title":"FMHA","slug":"FMHA","date":"2021-11-09T13:24:23.000Z","updated":"2021-11-09T13:30:26.452Z","comments":true,"path":"2021/11/09/FMHA/","link":"","permalink":"http://example.com/2021/11/09/FMHA/","excerpt":"","text":"1. 一主三备主：锦绣备：锦绣 + 荔景 + 光明 2. 复制类型同步/半同步 3. 容灾强容灾 4. 卡主修复关闭：直接切换主备开启：异步复制，容易出现单点故障，导致数据丢失","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"数据库","slug":"答辩/数据库","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"db","slug":"db","permalink":"http://example.com/tags/db/"}]},{"title":"CTSDB查询优化","slug":"CTSDB查询优化","date":"2021-11-09T13:24:09.000Z","updated":"2021-11-09T13:28:33.727Z","comments":true,"path":"2021/11/09/CTSDB查询优化/","link":"","permalink":"http://example.com/2021/11/09/CTSDB%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/","excerpt":"","text":"1. from/size避免分页深度 2. 实时聚合 =》 rollup实时聚合影响：内存占用，分桶多的数据 3. 排序优化 index sorting，docID和indexSorting的顺序一致 遍历 =》 提前中断 降低了写入性能 提高了查询性能 预排序 + after key + 提前中断 数据压缩率 4. 查询剪枝segment，最大值最小值遍历 =》 跳过 5. routing一次聚合 + 分片级并发 6. rollup流式聚合（并发分页）indexSorting（提前中断）查询剪枝routing（分片级并发） 7. composite","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"大数据","slug":"答辩/大数据","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"ctsdb","slug":"ctsdb","permalink":"http://example.com/tags/ctsdb/"},{"name":"search","slug":"search","permalink":"http://example.com/tags/search/"}]},{"title":"权限 & 数据安全","slug":"权限-数据安全","date":"2021-11-09T13:18:01.000Z","updated":"2021-11-10T14:20:32.287Z","comments":true,"path":"2021/11/09/权限-数据安全/","link":"","permalink":"http://example.com/2021/11/09/%E6%9D%83%E9%99%90-%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/","excerpt":"","text":"1. 权限 web：权限系统 openapi：鉴权系统 + 配置 CTSDB：用户名密码 CKV+：用户名密码 FMHA：强密码 2. 安全（1）存储安全 kafka 副本 + leader 加密（SSL，影响性能） + 身份验证 + 授权 ctsdb 副本 + 选举 密码 + VPC网络隔离 身份认证 + 用户鉴权 FMHA 一地三中心 密码 + 防火墙 半同步 + GTID + read_only ckv+ 数据同步：异步 + 强一致 数据备份：本地快照 + 冷备 副本分片：主备切换 （2）信息安全数据隔离：权限环境：部署事后审计 （3）传输安全kafka：加密 + SSLFMHA：加密CTSDB：内部TLS + 外部HTTPSckv+：无 （4）数据泄露措施 冻结设备，断网 开启日志记录，开启审计 修改密码 确定数据泄露影响 检查防火墙/子网隔离/杀毒软件/告警 及时汇报 发布公告 （5）数据库防篡改 开启数据库log日志记录功能 开启端口的安全策略，限制对外开放 账户管理，授权 数字签名 防火墙","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"安全","slug":"答辩/安全","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"auth","slug":"auth","permalink":"http://example.com/tags/auth/"},{"name":"data-safe","slug":"data-safe","permalink":"http://example.com/tags/data-safe/"}]},{"title":"慢查询 & 限流 & 限频","slug":"search","date":"2021-11-09T13:09:20.000Z","updated":"2021-11-09T13:16:26.582Z","comments":true,"path":"2021/11/09/search/","link":"","permalink":"http://example.com/2021/11/09/search/","excerpt":"","text":"1. 慢查询（1）ctsdb：30s超时影响：CPU，内存 优化： 索引，不用通配符 agg改成composite 分片数据 聚合拆分成多个，避免分桶太多 独立协调节点 routing 增加刷新间隔 配置熔断：内存限制 （2）fmha影响：session长期占用，cpu、内存升高，可用性降低 优化： 主键 索引减少like 拆表/中间表 查询分解 limit优化 2. 限流（1）接口限流 计数算法：简单 滑动窗口：存储空间大 漏桶算法 令牌桶：允许一定程度的并发 （2）数据上报限流writer： RateLimiter，令牌桶 2w/s/线程 processor： writer queue满了，熔断，蓄水池 恢复，writer queue 蓄水池，writer queue Loader： LoadQuata，数值判断大小 6w/s/线程","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"其他","slug":"答辩/其他","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"search","slug":"search","permalink":"http://example.com/tags/search/"},{"name":"server","slug":"server","permalink":"http://example.com/tags/server/"}]},{"title":"OMS-GATEWAY","slug":"oms","date":"2021-11-09T13:02:40.000Z","updated":"2021-11-09T13:08:24.912Z","comments":true,"path":"2021/11/09/oms/","link":"","permalink":"http://example.com/2021/11/09/oms/","excerpt":"","text":"1. 架构oms-api：oms协议的封装oms-gateway：网关，服务发现，负载均衡，统一鉴权oms应用框架：子服务框架，oms协议，服务发现协议 2. 容灾（1）自身集群L5访问网关，网关切换，域名集群，多机器组成，同步子服务信息 （2）子服务 子服务信息保存在内存中 同步协议，同步子服务信息到其他网关机器中 子服务同步其他子服务信息到本地 网关检查子服务上报的心跳，剔除 客户端缓存 3. 路由（1）就近路由根据网关所在机房，相同地理信息的子服务负载均衡，轮询选择IP （2）指定机房路由4. 鉴权权限控制：统一鉴权中心 + 配置（白名单，人工）客户端身份的鉴定 + 被访问服务的权限控制网关对子服务鉴权，agent","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"OMS","slug":"答辩/OMS","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/OMS/"}],"tags":[{"name":"oms","slug":"oms","permalink":"http://example.com/tags/oms/"}]},{"title":"cftologserver","slug":"cftologserver","date":"2021-11-09T12:56:11.000Z","updated":"2021-11-09T13:02:28.279Z","comments":true,"path":"2021/11/09/cftologserver/","link":"","permalink":"http://example.com/2021/11/09/cftologserver/","excerpt":"","text":"1. 模块化（1）五个模块（2）资源配置kafka集群：深圳 + 上海消费者：分片16cacher：ThreadPoolExecutor，100个线程，2000个无界队列processor：每个尾号一个线程（尾号hash % 线程数）writer：1/分片 + 1/processor （3）机器说明B70内存：125G，16G * 8 = 128G硬盘：300G物理CPU：2核数：12逻辑CPU：48（2 * 12 *2）CPU Mhz：2301.00RAID：RAID1网络：10GE * 2，10G以太网网络 2. 线程池（1）作用降低资源消耗提高系统运行速度提高可管理性 （2）使用ThreadPoolExecutor核心线程池：100阻塞队列：ArrayBlockingQueue，2000线程池：200饱和策略：DiscardPolicy 3. 缓存同步锁，synchronized，多线程环境，线程安全同步锁","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"日志服务","slug":"答辩/日志服务","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1/"}],"tags":[{"name":"log","slug":"log","permalink":"http://example.com/tags/log/"}]},{"title":"ckv+ & ckv & redis","slug":"cache","date":"2021-11-09T12:41:16.000Z","updated":"2021-11-09T12:54:35.251Z","comments":true,"path":"2021/11/09/cache/","link":"","permalink":"http://example.com/2021/11/09/cache/","excerpt":"","text":"1. CKV+（1）多数据结构string，list，zset等等 （2）并发处理单进程，多线程一个分片绑定一个CPU，避免加锁 网络IO，编解码，分给所有CPU 数据执行，分片ID指定的CPU （3）强一致同步raft协议 + 冷备 （4）多协议支持redis + memcache （5）冷热分离不支持 （6）读写性能多核，多线程一个分片一个CPU，避免加锁CPU对应独立的处理进程网络IO和编解码，使用所有的CPU数据执行，使用分片ID指定的CPU （7）限制key，最大64kvalue，最大32M （8）内存使用率多规格block + 动态分配page 2. CKV（1）多数据结构只支持string （2）并发处理多进程加锁 （3）强一致同步不支持其他同步:recover恢复中心 （4）多协议支持memcache （5）冷热分离热数据系统,CMEM冷数据系统，SSD （6）读写性能网络IO与核心流程解耦多进程逻辑处理，进程间加锁（毛刺） （7）限制key，2-10bytesvalue，最大10M，最好小于1M （8）内存使用率和obj_size业务平均记录大小有关业务记录大小分布越集中，碎片率越低 3. Redis（1）多数据结构string，list，zset等等 （2）并发处理多线程，2020年下推出网络IO多线程 （3）强一致同步不支持，只有异步复制 （4）多协议支持（5）冷热分离不支持 （6）读写性能非阻塞IO + IO多路复用单线程 + 队列技术 + hash数据结构 （7）限制value，1GB （8）内存使用率LRU,TTL,腾出空间 过期键删除，释放空间无法充分利用 分布式存储，槽机制 缩短key，value长度 序列化 数据对齐 安全重启 固定范围的内存块分配：小，大，巨大每个范围又被划分成多个小的内存块单位","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"缓存","slug":"答辩/缓存","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E7%BC%93%E5%AD%98/"}],"tags":[{"name":"cache","slug":"cache","permalink":"http://example.com/tags/cache/"}]},{"title":"flink & spark & storm & oceanus & 缓存","slug":"stream-computing","date":"2021-11-09T12:32:37.000Z","updated":"2021-11-09T12:40:00.999Z","comments":true,"path":"2021/11/09/stream-computing/","link":"","permalink":"http://example.com/2021/11/09/stream-computing/","excerpt":"","text":"1. flink流式模型：原生流处理，一条一条处理数据处理保证：高，有且仅有一次，检查点机制容错性：中等，checkpoint，快照容错开销：低，小批量数据（轻量级，不阻塞流，checkpoint异步，不影响吞吐量）延时：低，一条一条处理吞吐量：高，缓存块 + 超时值 2. spark流式模型：微批处理数据处理保证：高，有且仅有一次，重新计算容错性：高，RDD checkpoint（弹性分布式数据集）（通过整个数据集的计算流程的血缘关系实现重建）容错开销：中等（有状态计算需要额外的RDD维护状态，影响吞吐）延时：中等，小批次处理吞吐量：高，微批次 3. storm流式模型：原生流处理数据处理保证：中等，至少一次，重复容错性：中等，上有数据备份 + ACK容错开销：高，ACK（所有节点每个节点ACK一次，每条data都做ACK）延时：低，一条一条处理吞吐量：低，ACK，容错影响易用性：低，遵循topology 4. oceanus版本支持：外部最新1.13.2，内部还在1.0.9特性支持：不足运维：值班制度其他：小bug多","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"流式计算","slug":"答辩/流式计算","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"}],"tags":[{"name":"stream-computing","slug":"stream-computing","permalink":"http://example.com/tags/stream-computing/"}]},{"title":"hermes & es & ces & ctsdb","slug":"hermes-es","date":"2021-11-09T12:22:30.000Z","updated":"2021-11-09T13:17:28.041Z","comments":true,"path":"2021/11/09/hermes-es/","link":"","permalink":"http://example.com/2021/11/09/hermes-es/","excerpt":"","text":"1. hermes写入搜索性能：HDFS 2. es存储规模限制：集群管理成本，信息同步成本 写入搜索性能：本地磁盘 3. ces存储规模：集群管理成本，信息同步成本 写入搜索性能：同CTSDB 特点：适合检索 4. CTSDB（1）存储规模集群大小，管理成本，集群元数据大同步慢 （2）低成本存储编码压缩算法 + rollup + 过期时间 （3）写入搜索性能 写入 写入内存，之后再写入磁盘 文件裁剪优化 查询 缓存 倒排索引 存储模型，segment合并，按时间序分层合并 执行引擎优化，index sorting + after key + 提前中断 文件裁剪优化 （4）时序特性时序场景管理能力 metric封装 按时间滚动生成子表 自动产生自动销毁 过期自动清理 （5）聚合rollup 流式聚合（分页并发） 查询剪枝（segment） index sorting（提前中断） routing（分片级并发） (6) CTSDB manager每个地域一个功能： 任务下发 index自动创建/删除 变配 监控 发货 （7）CTSDB-GATEWAYVPC网络：安全性VPC的VIP：负载均衡","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"大数据","slug":"答辩/大数据","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"big-data","slug":"big-data","permalink":"http://example.com/tags/big-data/"}]},{"title":"TDW & Hermes","slug":"tdw-hermes","date":"2021-11-09T12:18:23.000Z","updated":"2021-11-09T12:21:14.943Z","comments":true,"path":"2021/11/09/tdw-hermes/","link":"","permalink":"http://example.com/2021/11/09/tdw-hermes/","excerpt":"","text":"1. 经过三层存储2. tdw性能差tdw基于hive，hdfs 3. hermes性能差基于HDFS，比不上本地文件系统tdw -&gt; hermes，LZ离线导入，提交MR任务构建索引，受资源池影响，还需要进行索引合并","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"大数据","slug":"答辩/大数据","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"big-data","slug":"big-data","permalink":"http://example.com/tags/big-data/"}]},{"title":"大数据处理平台对比","slug":"big-data-compare","date":"2021-11-09T04:51:15.000Z","updated":"2021-11-11T14:14:50.302Z","comments":true,"path":"2021/11/09/big-data-compare/","link":"","permalink":"http://example.com/2021/11/09/big-data-compare/","excerpt":"","text":"1. 关系型数据库：mysql + postgre优点： 稳定 简单 结构化数据 缺点： 存储成本大（时序数据压缩不佳） 维护成本高（人工分库分表） 写入吞吐低（磁盘IO + 索引建立） 查询性能差（磁盘IO + 索引建立） 聚合海量性能差（适合事务，不适合聚合） 数据规模支持小 难以横向扩展 postgre，聚合查询，容易出现性能瓶颈 2. 非关系型数据库：mongodb优点 查询功能强大 表结构灵活可变 删改数据方便 海量存储 缺点 多表查询、复杂事务等高级操作有阻碍 非分布式，难以横向扩容：集群配置，绑定分片、副本节点 字段搜索需要手动索引：B+ tree，最左优先 不适合大数据量查询：比不上ES的倒排索引（亿级） 不适合多表和复杂条件查询：创建B+树索引 不适合全文检索：字段个数有限制 不适合聚合：负责聚合通过MapReduce，速度慢 和es的对比 mongodb适合需要修改的数据，es适合不需要的 es查询/全文索引/聚合分析比mongodb强 3. druid，德鲁伊介绍：分布式的，支持实时多维OLAP分析的数据处理系统优点： 适合聚合，快速扫描：列式存储，压缩的位图索引 可扩展的分布式系统：自我平衡，易于操作 支持数据规模大 支持实时或批量查询，秒级查询：列存压缩，位图索引，倒排索引，预聚合 基于时间的分区：提高时间数据性能 缺点： 支持基础的搜索，不支持全文搜索 核心功能rollup，rollup之后丢失明细数据 不适合复杂聚合 外部依赖多，部署运维麻烦 4. clickhouse完全列式存储计算的分析性数据库，OLAP 优点 数据压缩 多核并行处理，单机性能到极限 适合复杂深度聚合：merge tree 写入吞吐量大，ES 5倍以上 查询速度快，支持SQL（列式+压缩） 支持向量化计算 服务器成本低，稳定性更高 缺点： 分布式依赖zk，无节点发现能力，需要手动配置（和mongodb一样） 列式数据库，不支持全文检索（列式存储） 无法动态添加字段 日志无法长期保存（下线清理） 不支持高并发查询（qps 100，单次查询利用所有资源） 5. es：全文索引综合首选：查询 + 删改 + 聚合 + 运维 + 可视化kibana + 监控monitor + 安全管理 （1）mongodb 文档查询性能：倒排索引/KDB-Tree比B+树厉害 聚合分析能力：ES提供doc-value，比mongodb行式快 分布式（集群分片副本）：ES自动 &gt; mongodb手动 ES特色功能比mongodb多：kibana，监控等等 ES适合JAVA开发，RESTFUL API，mongodb基于C++ ES字段自动索引，mongodb需要手动建立 存储：内存，不考虑 （2）druid rollup后druid明细数据会丢失，ES可查询明细数据 druid适合单类聚合查询，不适合复杂的 druid外部依赖多，部署运维麻烦（存储使用HDFS)；ES搭建十分简单，外部依赖少 druid不支持全文检索 （3）clickhouse 建表需要专家参与：索引匹配则效率高，不匹配效率波动大 并发能力弱：单次查询利用所有资源 不支持全文检索：列式存储 不适合通过其键检索单行的点查询，es适合点查询 分布式，无节点发现能力，需手动配置（节点，分片，副本） （4）hermes 读写性能：ES读写性能比Hermes好，因为HDFS的性能比不上本地文件系统 服务可用性：节点故障时，分片的服务恢复时间相对较长，包括原节点的WAL恢复，索引的online操作；ES可用性较高，多个副本都是online状态，副本切换 侧重点：hermes侧重数据分析，es侧重搜索和聚合 运营效益：部门相关系统均选择es/ctsdb，有问题，沟通询问更顺畅方便 全本搜索 + kibana （5）hbase 查询：hbase不支持复杂查询（列式存储） 依赖重：hbase无专用查询语言，依赖第三方工具 Rowkey：hbase依赖Rowkey设计，ES更通用 6. hermes大数据实时分析系统海量数据实时写入和存储，低延迟查询分析的平台索引的读写和分布式架构自研，底层存储基于HDFS，集群管理利用ZK 缺点 写入搜索性能差一点（访问HDFS，比不上访问本地文件系统） 查询写入性能差 优点 数据导入可以通过kafka等直接写入/MapReduce 计算与存储分离，管理精细化，浪费更少 分片数据存储在HDFS，资源更加弹性 写入时资源消耗低，可用于索引合并的资源更多，减少小索引的数量，提高查询性能，副本异步同步 hermes将索引和数据分离存储，降低索引目录刷盘次数和目录个数，提高读写 hermes适合数据分析，es适合检索 适合更大规模的业务 7. hbase基于HDFS的数据库，列式存储，无专用查询语言，NoSql数据库 优点 海量数据实时查询 极强的横向扩展能力 近实时系统，支持实时查询 支持更大量的数据 缺点 复杂查询难以进行，列式存储 依赖多：无专用查询语言，依赖第三方 基于RowKey，RowKey设计的好坏决定了HBase使用效果 8. hadoopmapReduce + HDFS，hive和hbase的基础 缺点：数据延迟高（离线批处理） + 查询性能差 9. hivehadoop数据仓库工具，分析查询引擎，用于数据分析 功能：hive将sql翻译成MapReduce，处理和计算HDFS数据缺点：数据延迟高（离线批处理）特点：本身不存储也不计算，存储依赖HDFS，计算依赖MapReduce","categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"大数据","slug":"答辩/大数据","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"big-data","slug":"big-data","permalink":"http://example.com/tags/big-data/"}]},{"title":"hexo-operation","slug":"hexo-operation","date":"2021-11-05T08:54:14.000Z","updated":"2021-11-05T09:56:43.845Z","comments":true,"path":"2021/11/05/hexo-operation/","link":"","permalink":"http://example.com/2021/11/05/hexo-operation/","excerpt":"","text":"新建hexo new &quot;file-name&quot;新建的markdown文件在source/_post/目录下 生成静态网页hexo generate生成的静态网页在public目录的相应的日期下，比如2021-11-05生成，在public/2021/11/05文件夹下 本地启动hexo server启动端口为4000，可使用localhost:4000查看 部署hexo deploy网址为：huiresurgeran.github.io带提交信息hexo deploy -m &quot;commit messgae 删除（1）去本地文件夹的/source/_post目录下删除需要删除的.md文件（2）去本地文件夹的/public目录下删除这篇博客对应的文件夹（根据发布时间归档）（3）重新生成并发布：generate + deploy 问题博客更新时出现问题，可以进行清理并重新生成静态网页hexo cleanhexo generate 参考内部文档https://km.woa.com/group/19976/articles/show/297274?kmref=search&amp;from_page=1&amp;no=2 git分支备份hexo md源码https://blog.csdn.net/qq_45271256/article/details/105800705?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link","categories":[{"name":"code-tool","slug":"code-tool","permalink":"http://example.com/categories/code-tool/"},{"name":"hexo","slug":"code-tool/hexo","permalink":"http://example.com/categories/code-tool/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"tool","slug":"tool","permalink":"http://example.com/tags/tool/"}]},{"title":"java-bytes","slug":"java-bytes","date":"2021-11-05T08:52:31.000Z","updated":"2021-11-05T08:52:31.947Z","comments":true,"path":"2021/11/05/java-bytes/","link":"","permalink":"http://example.com/2021/11/05/java-bytes/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"maven_setting","slug":"maven-setting","date":"2021-03-03T06:13:15.000Z","updated":"2021-03-03T06:42:12.836Z","comments":true,"path":"2021/03/03/maven-setting/","link":"","permalink":"http://example.com/2021/03/03/maven-setting/","excerpt":"","text":"settings.xml文件用途 设置maven参数 包含本地仓库路径，远程仓库路径，认证信息等 settings.xml文件位置 user.home/.m2/settings.xml 元素 顶级元素 LocalRepository: 本地仓库路径&lt;localRepository&gt;$&#123;user.home&#125;/.m2/repository&lt;/localRepository&gt; InteractiveMode: maven是否需要和用户交互获得输入&lt;interactiveMode&gt;true&lt;/interactiveMode&gt; UsePluginRegistry: Offline: maven是否需要在离线模式下运行&lt;offline&gt;true&lt;/offline&gt; PluginGroups Servers: 仓库账号信息1234567891011121314151617181920&lt;!--配置服务端的一些设置。一些设置如安全证书不应该和pom.xml一起分发。这种类型的信息应该存在于构建服务器上的settings.xml文件中。 --&gt;&lt;servers&gt; &lt;!--服务器元素包含配置服务器时需要的信息 --&gt; &lt;server&gt; &lt;!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 --&gt; &lt;id&gt;server001&lt;&#x2F;id&gt; &lt;!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 --&gt; &lt;username&gt;my_login&lt;&#x2F;username&gt; &lt;!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 +。详情请访问密码加密页面 --&gt; &lt;password&gt;my_password&lt;&#x2F;password&gt; &lt;!--鉴权时使用的私钥位置。和前两个元素类似，私钥位置和私钥密码指定了一个私钥的路径（默认是$&#123;user.home&#125;&#x2F;.ssh&#x2F;id_dsa）以及如果需要的话，一个密语。将来passphrase和password元素可能会被提取到外部，但目前它们必须在settings.xml文件以纯文本的形式声明。 --&gt; &lt;privateKey&gt;$&#123;usr.home&#125;&#x2F;.ssh&#x2F;id_dsa&lt;&#x2F;privateKey&gt; &lt;!--鉴权时使用的私钥密码。 --&gt; &lt;passphrase&gt;some_passphrase&lt;&#x2F;passphrase&gt; &lt;!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 --&gt; &lt;filePermissions&gt;664&lt;&#x2F;filePermissions&gt; &lt;!--目录被创建时的权限。 --&gt; &lt;directoryPermissions&gt;775&lt;&#x2F;directoryPermissions&gt; &lt;&#x2F;server&gt;&lt;&#x2F;servers&gt; Mirrors: 仓库列表的下载镜像列表12345678910111213&lt;mirrors&gt; &lt;!-- 给定仓库的下载镜像。 --&gt; &lt;mirror&gt; &lt;!-- 该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt; &lt;id&gt;planetmirror.com&lt;&#x2F;id&gt; &lt;!-- 镜像名称 --&gt; &lt;name&gt;PlanetMirror Australia&lt;&#x2F;name&gt; &lt;!-- 该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt; &lt;url&gt;http:&#x2F;&#x2F;downloads.planetmirror.com&#x2F;pub&#x2F;maven2&lt;&#x2F;url&gt; &lt;!-- 被镜像的服务器的id。例如，如果我们要设置了一个Maven中央仓库（http:&#x2F;&#x2F;repo.maven.apache.org&#x2F;maven2&#x2F;）的镜像，就需要将该元素设置成central。这必须和中央仓库的id central完全一致。 --&gt; &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt; &lt;&#x2F;mirror&gt;&lt;&#x2F;mirrors&gt; Proxies: 代理123456789101112131415161718192021&lt;proxies&gt; &lt;!--代理元素包含配置代理时需要的信息 --&gt; &lt;proxy&gt; &lt;!--代理的唯一定义符，用来区分不同的代理元素。 --&gt; &lt;id&gt;myproxy&lt;&#x2F;id&gt; &lt;!--该代理是否是激活的那个。true则激活代理。当我们声明了一组代理，而某个时候只需要激活一个代理的时候，该元素就可以派上用处。 --&gt; &lt;active&gt;true&lt;&#x2F;active&gt; &lt;!--代理的协议。 协议:&#x2F;&#x2F;主机名:端口，分隔成离散的元素以方便配置。 --&gt; &lt;protocol&gt;http&lt;&#x2F;protocol&gt; &lt;!--代理的主机名。协议:&#x2F;&#x2F;主机名:端口，分隔成离散的元素以方便配置。 --&gt; &lt;host&gt;proxy.somewhere.com&lt;&#x2F;host&gt; &lt;!--代理的端口。协议:&#x2F;&#x2F;主机名:端口，分隔成离散的元素以方便配置。 --&gt; &lt;port&gt;8080&lt;&#x2F;port&gt; &lt;!--代理的用户名，用户名和密码表示代理服务器认证的登录名和密码。 --&gt; &lt;username&gt;proxyuser&lt;&#x2F;username&gt; &lt;!--代理的密码，用户名和密码表示代理服务器认证的登录名和密码。 --&gt; &lt;password&gt;somepassword&lt;&#x2F;password&gt; &lt;!--不该被代理的主机名列表。该列表的分隔符由代理服务器指定；例子中使用了竖线分隔符，使用逗号分隔也很常见。 --&gt; &lt;nonProxyHosts&gt;*.google.com|ibiblio.org&lt;&#x2F;nonProxyHosts&gt; &lt;&#x2F;proxy&gt;&lt;&#x2F;proxies&gt; Profiles: 根据环境参数调整构建配置的列表1234567891011121314&lt;profiles&gt; &lt;profile&gt; &lt;!-- profile的唯一标识 --&gt; &lt;id&gt;test&lt;&#x2F;id&gt; &lt;!-- 自动触发profile的条件逻辑 --&gt; &lt;activation &#x2F;&gt; &lt;!-- 扩展属性列表 --&gt; &lt;properties &#x2F;&gt; &lt;!-- 远程仓库列表 --&gt; &lt;repositories &#x2F;&gt; &lt;!-- 插件仓库列表 --&gt; &lt;pluginRepositories &#x2F;&gt; &lt;&#x2F;profile&gt;&lt;&#x2F;profiles&gt; activation: 自动触发profile的条件逻辑 properties: 扩展属性列表，可以用${X}来使用 repositories: 远程仓库列表12345678910111213141516171819202122232425262728&lt;repositories&gt; &lt;!--包含需要连接到远程仓库的信息 --&gt; &lt;repository&gt; &lt;!--远程仓库唯一标识 --&gt; &lt;id&gt;codehausSnapshots&lt;&#x2F;id&gt; &lt;!--远程仓库名称 --&gt; &lt;name&gt;Codehaus Snapshots&lt;&#x2F;name&gt; &lt;!--如何处理远程仓库里发布版本的下载 --&gt; &lt;releases&gt; &lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt; &lt;enabled&gt;false&lt;&#x2F;enabled&gt; &lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt; &lt;updatePolicy&gt;always&lt;&#x2F;updatePolicy&gt; &lt;!--当Maven验证构件校验文件失败时该怎么做-ignore（忽略），fail（失败），或者warn（警告）。 --&gt; &lt;checksumPolicy&gt;warn&lt;&#x2F;checksumPolicy&gt; &lt;&#x2F;releases&gt; &lt;!--如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories&#x2F;repository&#x2F;releases元素 --&gt; &lt;snapshots&gt; &lt;enabled &#x2F;&gt; &lt;updatePolicy &#x2F;&gt; &lt;checksumPolicy &#x2F;&gt; &lt;&#x2F;snapshots&gt; &lt;!--远程仓库URL，按protocol:&#x2F;&#x2F;hostname&#x2F;path形式 --&gt; &lt;url&gt;http:&#x2F;&#x2F;snapshots.maven.codehaus.org&#x2F;maven2&lt;&#x2F;url&gt; &lt;!--用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt; &lt;layout&gt;default&lt;&#x2F;layout&gt; &lt;&#x2F;repository&gt;&lt;&#x2F;repositories&gt; pluginRepositories: 发现插件的远程仓库列表 activeProfiles: 手动激活profiles的列表123 &lt;!-- 要激活的profile id --&gt; &lt;activeProfile&gt;env-test&lt;&#x2F;activeProfile&gt;&lt;&#x2F;activeProfiles&gt;","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"电影计划","slug":"movie","date":"2021-03-01T02:14:58.000Z","updated":"2021-03-01T02:26:57.255Z","comments":true,"path":"2021/03/01/movie/","link":"","permalink":"http://example.com/2021/03/01/movie/","excerpt":"","text":"2020 变身特工 八佰 急先锋 花木兰 小妇人 假面饭店 妙先生 金刚川 除暴 紧急救援 沐浴之王 晴雅集 疯狂原始人2 神奇女侠1984 一秒钟 数码宝贝：最后的进化 喜宝 温暖的抱抱 风平浪静 哆啦A梦：大雄的新恐龙 月半爱丽丝 隐形人海兽之子 宝可梦：超梦的逆袭进化 气球","categories":[{"name":"电影","slug":"电影","permalink":"http://example.com/categories/%E7%94%B5%E5%BD%B1/"}],"tags":[{"name":"movie","slug":"movie","permalink":"http://example.com/tags/movie/"}]},{"title":"test","slug":"test","date":"2021-02-26T08:57:03.000Z","updated":"2021-02-26T08:57:03.632Z","comments":true,"path":"2021/02/26/test/","link":"","permalink":"http://example.com/2021/02/26/test/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"api-doc","slug":"api-doc","date":"2021-02-26T07:14:51.000Z","updated":"2021-02-26T07:21:19.526Z","comments":true,"path":"2021/02/26/api-doc/","link":"","permalink":"http://example.com/2021/02/26/api-doc/","excerpt":"","text":"生成文档: apidoc -i src -o dest","categories":[],"tags":[]},{"title":"神盾对账延迟故障复盘","slug":"safe_delay","date":"2021-02-25T12:49:22.000Z","updated":"2021-03-25T11:53:08.445Z","comments":true,"path":"2021/02/25/safe_delay/","link":"","permalink":"http://example.com/2021/02/25/safe_delay/","excerpt":"","text":"2.19 开始有业务反馈神盾出现延迟(shuangchen) 初步来看，agent上报到svr延迟较大，应是大量数据上报超时堆积导致，每次agent上报超时，都会等待20s 2.20 延迟进一步加剧，大约有10+对账，处于延迟边缘，引发大量延迟事件 2.22 下午，发布新版本（增加耗时日志打印），延迟进一步加大，到5点逐渐扩展到2h管理员收到大量告警，agent等待svr处理超过20s 2.22 晚上，发布多个版本，修改数据库线程池大小，增加超时时间设置，延迟降低，出现漏对事件 2.23 早上，延迟再次增加，且出现大量漏对事件，数据库备机压力大，dba增加索引，svr修改线程池，调整超时时间，延迟逐渐减少，漏对逐渐减少 BasicDataSource 改为 HiKariDataSourceHikariCP是一个轻量级的十分快速的JDBC连接池框架。使用了以下这些技术 字节级别的工程技术 微观层面的优化 集合框架的智能使用demo123456789101112HikariConfig config &#x3D; new HikariConfig();HikariDataSource ds;config.setJdbcUrl(&quot;jdbc_url&quot;);config.setUsername(&quot;xxx&quot;);config.setPassword(&quot;xxx&quot;);config.addDataSourceProperty(&quot;cachePrepStms&quot;, &quot;true&quot;);config.addDataSourceProperty(&quot;prepStmtCacheSize&quot;, &quot;250&quot;);config.addDataSourceProperty(&quot;prepStmtCacheSqlLimit&quot;, &quot;2048&quot;);ds &#x3D; new HikariDataSource(config); HikariConfig 配置类，初始化数据源HikariCP可以检测到连接泄漏 索引增加字段（索引机制还是挺复杂的，有时间需要好好研究）跟数据量，数据过滤比例，排序都有关系 返回数据比例&gt;30%，不使用索引 where 和 order条件，先where后order 没有过滤效果的条件，可以不建立索引 时间段查询，&gt;= &amp;&amp; &lt;= 索引效果没有=效果好 like索引效果，没有in效果好 2.24 下午，上报处理逻辑优化，尽量减少查询次数，减少排序，悲观锁改为乐观锁 后续，出现数次safe status更新失败告警，部分数据量大的表耗时偶尔较长，部分对账同时间上报多条数据，待优化","categories":[{"name":"safe","slug":"safe","permalink":"http://example.com/categories/safe/"}],"tags":[{"name":"safe","slug":"safe","permalink":"http://example.com/tags/safe/"}]}],"categories":[{"name":"答辩","slug":"答辩","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/"},{"name":"模调","slug":"答辩/模调","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E6%A8%A1%E8%B0%83/"},{"name":"大数据","slug":"答辩/大数据","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"原理","slug":"答辩/原理","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%8E%9F%E7%90%86/"},{"name":"网络","slug":"答辩/网络","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E7%BD%91%E7%BB%9C/"},{"name":"机型","slug":"答辩/机型","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E6%9C%BA%E5%9E%8B/"},{"name":"容灾","slug":"答辩/容灾","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%AE%B9%E7%81%BE/"},{"name":"分布式事务","slug":"答辩/分布式事务","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"},{"name":"数据库","slug":"答辩/数据库","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"安全","slug":"答辩/安全","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%AE%89%E5%85%A8/"},{"name":"其他","slug":"答辩/其他","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E5%85%B6%E4%BB%96/"},{"name":"OMS","slug":"答辩/OMS","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/OMS/"},{"name":"日志服务","slug":"答辩/日志服务","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1/"},{"name":"缓存","slug":"答辩/缓存","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E7%BC%93%E5%AD%98/"},{"name":"流式计算","slug":"答辩/流式计算","permalink":"http://example.com/categories/%E7%AD%94%E8%BE%A9/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"},{"name":"code-tool","slug":"code-tool","permalink":"http://example.com/categories/code-tool/"},{"name":"hexo","slug":"code-tool/hexo","permalink":"http://example.com/categories/code-tool/hexo/"},{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"},{"name":"电影","slug":"电影","permalink":"http://example.com/categories/%E7%94%B5%E5%BD%B1/"},{"name":"safe","slug":"safe","permalink":"http://example.com/categories/safe/"}],"tags":[{"name":"trace","slug":"trace","permalink":"http://example.com/tags/trace/"},{"name":"config","slug":"config","permalink":"http://example.com/tags/config/"},{"name":"data","slug":"data","permalink":"http://example.com/tags/data/"},{"name":"ctsdb","slug":"ctsdb","permalink":"http://example.com/tags/ctsdb/"},{"name":"big-data","slug":"big-data","permalink":"http://example.com/tags/big-data/"},{"name":"es","slug":"es","permalink":"http://example.com/tags/es/"},{"name":"kafka","slug":"kafka","permalink":"http://example.com/tags/kafka/"},{"name":"design pattern","slug":"design-pattern","permalink":"http://example.com/tags/design-pattern/"},{"name":"ssl","slug":"ssl","permalink":"http://example.com/tags/ssl/"},{"name":"ttl","slug":"ttl","permalink":"http://example.com/tags/ttl/"},{"name":"https","slug":"https","permalink":"http://example.com/tags/https/"},{"name":"computer type","slug":"computer-type","permalink":"http://example.com/tags/computer-type/"},{"name":"disaster tolerance","slug":"disaster-tolerance","permalink":"http://example.com/tags/disaster-tolerance/"},{"name":"distributed computing","slug":"distributed-computing","permalink":"http://example.com/tags/distributed-computing/"},{"name":"oop","slug":"oop","permalink":"http://example.com/tags/oop/"},{"name":"cap","slug":"cap","permalink":"http://example.com/tags/cap/"},{"name":"system","slug":"system","permalink":"http://example.com/tags/system/"},{"name":"db","slug":"db","permalink":"http://example.com/tags/db/"},{"name":"search","slug":"search","permalink":"http://example.com/tags/search/"},{"name":"auth","slug":"auth","permalink":"http://example.com/tags/auth/"},{"name":"data-safe","slug":"data-safe","permalink":"http://example.com/tags/data-safe/"},{"name":"server","slug":"server","permalink":"http://example.com/tags/server/"},{"name":"oms","slug":"oms","permalink":"http://example.com/tags/oms/"},{"name":"log","slug":"log","permalink":"http://example.com/tags/log/"},{"name":"cache","slug":"cache","permalink":"http://example.com/tags/cache/"},{"name":"stream-computing","slug":"stream-computing","permalink":"http://example.com/tags/stream-computing/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"tool","slug":"tool","permalink":"http://example.com/tags/tool/"},{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"movie","slug":"movie","permalink":"http://example.com/tags/movie/"},{"name":"safe","slug":"safe","permalink":"http://example.com/tags/safe/"}]}