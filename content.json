{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-02-25T13:22:27.000Z","updated":"2021-02-25T13:22:27.868Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"links","date":"2021-02-25T13:22:45.000Z","updated":"2021-02-25T13:22:45.356Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-02-25T13:22:36.000Z","updated":"2021-02-25T13:22:36.268Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-02-25T13:22:41.000Z","updated":"2021-02-25T13:22:41.351Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"changelog","date":"2021-02-25T13:28:40.000Z","updated":"2021-02-25T13:28:40.896Z","comments":true,"path":"changelog/index.html","permalink":"http://example.com/changelog/index.html","excerpt":"","text":""}],"posts":[{"title":"hexo-operation","slug":"hexo-operation","date":"2021-11-05T08:54:14.000Z","updated":"2021-11-05T09:36:54.315Z","comments":true,"path":"2021/11/05/hexo-operation/","link":"","permalink":"http://example.com/2021/11/05/hexo-operation/","excerpt":"","text":"新建hexo new &quot;file-name&quot;新建的markdown文件在source/_post/目录下 生成静态网页hexo generate生成的静态网页在public目录的相应的日期下，比如2021-11-05生成，在public/2021/11/05文件夹下 本地启动hexo server启动端口为4000，可使用localhost:4000查看 部署hexo deploy网址为：huiresurgeran.github.io带提交信息hexo deploy -m &quot;commit messgae 删除（1）去本地文件夹的/source/_post目录下删除需要删除的.md文件（2）去本地文件夹的/public目录下删除这篇博客对应的文件夹（根据发布时间归档）（3）重新生成并发布：generate + deploy 问题博客更新时出现问题，可以进行清理并重新生成静态网页hexo cleanhexo generate 参考内部文档https://km.woa.com/group/19976/articles/show/297274?kmref=search&amp;from_page=1&amp;no=2","categories":[{"name":"code-tool","slug":"code-tool","permalink":"http://example.com/categories/code-tool/"},{"name":"hexo","slug":"code-tool/hexo","permalink":"http://example.com/categories/code-tool/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"tool","slug":"tool","permalink":"http://example.com/tags/tool/"}]},{"title":"java-bytes","slug":"java-bytes","date":"2021-11-05T08:52:31.000Z","updated":"2021-11-05T08:52:31.947Z","comments":true,"path":"2021/11/05/java-bytes/","link":"","permalink":"http://example.com/2021/11/05/java-bytes/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"maven_setting","slug":"maven-setting","date":"2021-03-03T06:13:15.000Z","updated":"2021-03-03T06:42:12.836Z","comments":true,"path":"2021/03/03/maven-setting/","link":"","permalink":"http://example.com/2021/03/03/maven-setting/","excerpt":"","text":"settings.xml文件用途 设置maven参数 包含本地仓库路径，远程仓库路径，认证信息等 settings.xml文件位置 user.home/.m2/settings.xml 元素 顶级元素 LocalRepository: 本地仓库路径&lt;localRepository&gt;$&#123;user.home&#125;/.m2/repository&lt;/localRepository&gt; InteractiveMode: maven是否需要和用户交互获得输入&lt;interactiveMode&gt;true&lt;/interactiveMode&gt; UsePluginRegistry: Offline: maven是否需要在离线模式下运行&lt;offline&gt;true&lt;/offline&gt; PluginGroups Servers: 仓库账号信息1234567891011121314151617181920&lt;!--配置服务端的一些设置。一些设置如安全证书不应该和pom.xml一起分发。这种类型的信息应该存在于构建服务器上的settings.xml文件中。 --&gt;&lt;servers&gt; &lt;!--服务器元素包含配置服务器时需要的信息 --&gt; &lt;server&gt; &lt;!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 --&gt; &lt;id&gt;server001&lt;&#x2F;id&gt; &lt;!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 --&gt; &lt;username&gt;my_login&lt;&#x2F;username&gt; &lt;!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 +。详情请访问密码加密页面 --&gt; &lt;password&gt;my_password&lt;&#x2F;password&gt; &lt;!--鉴权时使用的私钥位置。和前两个元素类似，私钥位置和私钥密码指定了一个私钥的路径（默认是$&#123;user.home&#125;&#x2F;.ssh&#x2F;id_dsa）以及如果需要的话，一个密语。将来passphrase和password元素可能会被提取到外部，但目前它们必须在settings.xml文件以纯文本的形式声明。 --&gt; &lt;privateKey&gt;$&#123;usr.home&#125;&#x2F;.ssh&#x2F;id_dsa&lt;&#x2F;privateKey&gt; &lt;!--鉴权时使用的私钥密码。 --&gt; &lt;passphrase&gt;some_passphrase&lt;&#x2F;passphrase&gt; &lt;!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 --&gt; &lt;filePermissions&gt;664&lt;&#x2F;filePermissions&gt; &lt;!--目录被创建时的权限。 --&gt; &lt;directoryPermissions&gt;775&lt;&#x2F;directoryPermissions&gt; &lt;&#x2F;server&gt;&lt;&#x2F;servers&gt; Mirrors: 仓库列表的下载镜像列表12345678910111213&lt;mirrors&gt; &lt;!-- 给定仓库的下载镜像。 --&gt; &lt;mirror&gt; &lt;!-- 该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt; &lt;id&gt;planetmirror.com&lt;&#x2F;id&gt; &lt;!-- 镜像名称 --&gt; &lt;name&gt;PlanetMirror Australia&lt;&#x2F;name&gt; &lt;!-- 该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt; &lt;url&gt;http:&#x2F;&#x2F;downloads.planetmirror.com&#x2F;pub&#x2F;maven2&lt;&#x2F;url&gt; &lt;!-- 被镜像的服务器的id。例如，如果我们要设置了一个Maven中央仓库（http:&#x2F;&#x2F;repo.maven.apache.org&#x2F;maven2&#x2F;）的镜像，就需要将该元素设置成central。这必须和中央仓库的id central完全一致。 --&gt; &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt; &lt;&#x2F;mirror&gt;&lt;&#x2F;mirrors&gt; Proxies: 代理123456789101112131415161718192021&lt;proxies&gt; &lt;!--代理元素包含配置代理时需要的信息 --&gt; &lt;proxy&gt; &lt;!--代理的唯一定义符，用来区分不同的代理元素。 --&gt; &lt;id&gt;myproxy&lt;&#x2F;id&gt; &lt;!--该代理是否是激活的那个。true则激活代理。当我们声明了一组代理，而某个时候只需要激活一个代理的时候，该元素就可以派上用处。 --&gt; &lt;active&gt;true&lt;&#x2F;active&gt; &lt;!--代理的协议。 协议:&#x2F;&#x2F;主机名:端口，分隔成离散的元素以方便配置。 --&gt; &lt;protocol&gt;http&lt;&#x2F;protocol&gt; &lt;!--代理的主机名。协议:&#x2F;&#x2F;主机名:端口，分隔成离散的元素以方便配置。 --&gt; &lt;host&gt;proxy.somewhere.com&lt;&#x2F;host&gt; &lt;!--代理的端口。协议:&#x2F;&#x2F;主机名:端口，分隔成离散的元素以方便配置。 --&gt; &lt;port&gt;8080&lt;&#x2F;port&gt; &lt;!--代理的用户名，用户名和密码表示代理服务器认证的登录名和密码。 --&gt; &lt;username&gt;proxyuser&lt;&#x2F;username&gt; &lt;!--代理的密码，用户名和密码表示代理服务器认证的登录名和密码。 --&gt; &lt;password&gt;somepassword&lt;&#x2F;password&gt; &lt;!--不该被代理的主机名列表。该列表的分隔符由代理服务器指定；例子中使用了竖线分隔符，使用逗号分隔也很常见。 --&gt; &lt;nonProxyHosts&gt;*.google.com|ibiblio.org&lt;&#x2F;nonProxyHosts&gt; &lt;&#x2F;proxy&gt;&lt;&#x2F;proxies&gt; Profiles: 根据环境参数调整构建配置的列表1234567891011121314&lt;profiles&gt; &lt;profile&gt; &lt;!-- profile的唯一标识 --&gt; &lt;id&gt;test&lt;&#x2F;id&gt; &lt;!-- 自动触发profile的条件逻辑 --&gt; &lt;activation &#x2F;&gt; &lt;!-- 扩展属性列表 --&gt; &lt;properties &#x2F;&gt; &lt;!-- 远程仓库列表 --&gt; &lt;repositories &#x2F;&gt; &lt;!-- 插件仓库列表 --&gt; &lt;pluginRepositories &#x2F;&gt; &lt;&#x2F;profile&gt;&lt;&#x2F;profiles&gt; activation: 自动触发profile的条件逻辑 properties: 扩展属性列表，可以用${X}来使用 repositories: 远程仓库列表12345678910111213141516171819202122232425262728&lt;repositories&gt; &lt;!--包含需要连接到远程仓库的信息 --&gt; &lt;repository&gt; &lt;!--远程仓库唯一标识 --&gt; &lt;id&gt;codehausSnapshots&lt;&#x2F;id&gt; &lt;!--远程仓库名称 --&gt; &lt;name&gt;Codehaus Snapshots&lt;&#x2F;name&gt; &lt;!--如何处理远程仓库里发布版本的下载 --&gt; &lt;releases&gt; &lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt; &lt;enabled&gt;false&lt;&#x2F;enabled&gt; &lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt; &lt;updatePolicy&gt;always&lt;&#x2F;updatePolicy&gt; &lt;!--当Maven验证构件校验文件失败时该怎么做-ignore（忽略），fail（失败），或者warn（警告）。 --&gt; &lt;checksumPolicy&gt;warn&lt;&#x2F;checksumPolicy&gt; &lt;&#x2F;releases&gt; &lt;!--如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories&#x2F;repository&#x2F;releases元素 --&gt; &lt;snapshots&gt; &lt;enabled &#x2F;&gt; &lt;updatePolicy &#x2F;&gt; &lt;checksumPolicy &#x2F;&gt; &lt;&#x2F;snapshots&gt; &lt;!--远程仓库URL，按protocol:&#x2F;&#x2F;hostname&#x2F;path形式 --&gt; &lt;url&gt;http:&#x2F;&#x2F;snapshots.maven.codehaus.org&#x2F;maven2&lt;&#x2F;url&gt; &lt;!--用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt; &lt;layout&gt;default&lt;&#x2F;layout&gt; &lt;&#x2F;repository&gt;&lt;&#x2F;repositories&gt; pluginRepositories: 发现插件的远程仓库列表 activeProfiles: 手动激活profiles的列表123 &lt;!-- 要激活的profile id --&gt; &lt;activeProfile&gt;env-test&lt;&#x2F;activeProfile&gt;&lt;&#x2F;activeProfiles&gt;","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"电影计划","slug":"movie","date":"2021-03-01T02:14:58.000Z","updated":"2021-03-01T02:26:57.255Z","comments":true,"path":"2021/03/01/movie/","link":"","permalink":"http://example.com/2021/03/01/movie/","excerpt":"","text":"2020 变身特工 八佰 急先锋 花木兰 小妇人 假面饭店 妙先生 金刚川 除暴 紧急救援 沐浴之王 晴雅集 疯狂原始人2 神奇女侠1984 一秒钟 数码宝贝：最后的进化 喜宝 温暖的抱抱 风平浪静 哆啦A梦：大雄的新恐龙 月半爱丽丝 隐形人海兽之子 宝可梦：超梦的逆袭进化 气球","categories":[{"name":"电影","slug":"电影","permalink":"http://example.com/categories/%E7%94%B5%E5%BD%B1/"}],"tags":[{"name":"movie","slug":"movie","permalink":"http://example.com/tags/movie/"}]},{"title":"test","slug":"test","date":"2021-02-26T08:57:03.000Z","updated":"2021-02-26T08:57:03.632Z","comments":true,"path":"2021/02/26/test/","link":"","permalink":"http://example.com/2021/02/26/test/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"api-doc","slug":"api-doc","date":"2021-02-26T07:14:51.000Z","updated":"2021-02-26T07:21:19.526Z","comments":true,"path":"2021/02/26/api-doc/","link":"","permalink":"http://example.com/2021/02/26/api-doc/","excerpt":"","text":"生成文档: apidoc -i src -o dest","categories":[],"tags":[]},{"title":"神盾对账延迟故障复盘","slug":"safe_delay","date":"2021-02-25T12:49:22.000Z","updated":"2021-03-25T11:53:08.445Z","comments":true,"path":"2021/02/25/safe_delay/","link":"","permalink":"http://example.com/2021/02/25/safe_delay/","excerpt":"","text":"2.19 开始有业务反馈神盾出现延迟(shuangchen) 初步来看，agent上报到svr延迟较大，应是大量数据上报超时堆积导致，每次agent上报超时，都会等待20s 2.20 延迟进一步加剧，大约有10+对账，处于延迟边缘，引发大量延迟事件 2.22 下午，发布新版本（增加耗时日志打印），延迟进一步加大，到5点逐渐扩展到2h管理员收到大量告警，agent等待svr处理超过20s 2.22 晚上，发布多个版本，修改数据库线程池大小，增加超时时间设置，延迟降低，出现漏对事件 2.23 早上，延迟再次增加，且出现大量漏对事件，数据库备机压力大，dba增加索引，svr修改线程池，调整超时时间，延迟逐渐减少，漏对逐渐减少 BasicDataSource 改为 HiKariDataSourceHikariCP是一个轻量级的十分快速的JDBC连接池框架。使用了以下这些技术 字节级别的工程技术 微观层面的优化 集合框架的智能使用demo123456789101112HikariConfig config &#x3D; new HikariConfig();HikariDataSource ds;config.setJdbcUrl(&quot;jdbc_url&quot;);config.setUsername(&quot;xxx&quot;);config.setPassword(&quot;xxx&quot;);config.addDataSourceProperty(&quot;cachePrepStms&quot;, &quot;true&quot;);config.addDataSourceProperty(&quot;prepStmtCacheSize&quot;, &quot;250&quot;);config.addDataSourceProperty(&quot;prepStmtCacheSqlLimit&quot;, &quot;2048&quot;);ds &#x3D; new HikariDataSource(config); HikariConfig 配置类，初始化数据源HikariCP可以检测到连接泄漏 索引增加字段（索引机制还是挺复杂的，有时间需要好好研究）跟数据量，数据过滤比例，排序都有关系 返回数据比例&gt;30%，不使用索引 where 和 order条件，先where后order 没有过滤效果的条件，可以不建立索引 时间段查询，&gt;= &amp;&amp; &lt;= 索引效果没有=效果好 like索引效果，没有in效果好 2.24 下午，上报处理逻辑优化，尽量减少查询次数，减少排序，悲观锁改为乐观锁 后续，出现数次safe status更新失败告警，部分数据量大的表耗时偶尔较长，部分对账同时间上报多条数据，待优化","categories":[{"name":"safe","slug":"safe","permalink":"http://example.com/categories/safe/"}],"tags":[{"name":"safe","slug":"safe","permalink":"http://example.com/tags/safe/"}]}],"categories":[{"name":"code-tool","slug":"code-tool","permalink":"http://example.com/categories/code-tool/"},{"name":"hexo","slug":"code-tool/hexo","permalink":"http://example.com/categories/code-tool/hexo/"},{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"},{"name":"电影","slug":"电影","permalink":"http://example.com/categories/%E7%94%B5%E5%BD%B1/"},{"name":"safe","slug":"safe","permalink":"http://example.com/categories/safe/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"tool","slug":"tool","permalink":"http://example.com/tags/tool/"},{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"movie","slug":"movie","permalink":"http://example.com/tags/movie/"},{"name":"safe","slug":"safe","permalink":"http://example.com/tags/safe/"}]}